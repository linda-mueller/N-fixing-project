# Load the necessary libraries
library(dplyr);library(segmented);library(nlme);library(mgcv);library(gridExtra);library(betareg);
library(MASS);library(lme4);library(lmerTest);library(lsmeans);library(ggeffects);library(spdep);
library(ggplot2);library(effects);library(ncf);library(ape);library(sjPlot);library(gridExtra);
library(MuMIn);library(tidyverse);library(car); library(V8); library(rsq); library(DHARMa); library(grateful)
source("Master_modelling.R")  #change to functions??
####DATASET####
#Load dataset from data cleaning script
gdat.ref <- readRDS("data/fulldata_for_analysis_2023.rds") %>%
dplyr::select(c("entity_ID","entity_class","nfix","nfixno", "latitude","abs.lat","longitude", # Select columns
"landtype","status","presence","area","elev_range","precipitation","dist", "temperature","urbanland"))
# Load the necessary libraries
library(dplyr);library(segmented);library(nlme);library(mgcv);library(gridExtra);library(betareg);
library(MASS);library(lme4);library(lmerTest);library(lsmeans);library(ggeffects);library(spdep);
library(ggplot2);library(effects);library(ncf);library(ape);library(sjPlot);library(gridExtra);
library(MuMIn);library(tidyverse);library(car); library(V8); library(rsq); library(DHARMa); library(grateful)
source("Master_modelling.R")  #change to functions??
options(na.action = "na.fail") #Change na. action
####DATASET####
#Load dataset from data cleaning script
gdat.ref <- readRDS("data/fulldata_for_analysis_2023.rds") %>%
dplyr::select(c("entity_ID","entity_class","nfix","nfixno", "latitude","abs.lat","longitude", # Select columns
"landtype","status","presence","area","elev_range","precipitation","dist", "temperature","urbanland"))
####DATASET####
#Load dataset from data cleaning script
gdat.ref <- readRDS("data/fulldata_for_analysis_2023.rds") %>%
dplyr::select(c("entity_ID","entity_class","nfix","nfixno", "latitude","abs.lat","longitude", # Select columns
"landtype","status","presence","area","elev_range","precipitation","dist", "temperature","urbanland"))
# Load the necessary libraries
library(dplyr);library(segmented);library(nlme);library(mgcv);library(gridExtra);library(betareg);
library(MASS);library(lme4);library(lmerTest);library(lsmeans);library(ggeffects);library(spdep);
library(ggplot2);library(effects);library(ncf);library(ape);library(sjPlot);library(gridExtra);
library(MuMIn);library(tidyverse);library(car); library(V8); library(rsq); library(DHARMa); library(grateful)
source("Master_modelling.R")  #change to functions??
source("Master_modelling.R")  #change to functions??
options(na.action = "na.fail") #Change na. action
#Load dataset from data cleaning script
gdat.ref <- readRDS("data/fulldata_for_analysis_2023.rds") %>%
dplyr::select(c("entity_ID","entity_class","nfix","nfixno", "latitude","abs.lat","longitude", # Select columns
"landtype","status","presence","area","elev_range","precipitation","dist", "temperature","urbanland"))
#dataset for broad presence model including mainlands
gdat.ml.pres <- gdat.ref %>%
dplyr::select(c("entity_ID","nfix","nfixno", "latitude","abs.lat","longitude", # Select columns
"landtype","status","presence","area","elev_range","precipitation","temperature"))%>%
filter(!landtype=="other_island")%>%                                          #remove islands with undetermined type
mutate(area = as.vector(log10((area)+.01)))%>%                                #log transform area
drop_na()%>%
mutate_at(c("abs.lat","area","elev_range","precipitation", "temperature"), scale) #scale all explanatory variables
test <- gdat.ml.pres%>%filter(landtype=="nonoceanic")%>%filter(status=="naturalized")%>%drop_na()
broad.pres.model.full<- glm(presence~landtype*status+abs.lat+area+elev_range+precipitation+temperature, data =gdat.ml.pres, family= binomial(link ="logit"))
summary(broad.pres.model.full)
#dataset for broad presence model including mainlands
gdat.ml.pres <- gdat.ref %>%
dplyr::select(c("entity_ID","nfix","nfixno", "latitude","abs.lat","longitude", # Select columns
"landtype","status","presence","area","elev_range","precipitation","temperature"))%>%
filter(!landtype=="other_island")%>%                                          #remove islands with undetermined type
mutate(area = as.vector(log10((area)+.01)))%>%                                #log transform area
drop_na()%>%
mutate_at(c("abs.lat","area","elev_range","precipitation", "temperature"), scale) #scale all explanatory variables
test <- gdat.ml.pres%>%filter(landtype=="nonoceanic")%>%filter(status=="naturalized")%>%drop_na()
#check correlations
dat <- oceanic.prop.ntv
names(oceanic.prop.ntv)
#check correlations
dat <- gdat.ml.pres
names(gdat.ml.pres)
cont.var <- c("abs.lat", "elev_range","area","precipitation","temperature")
Mypairs(dat[,cont.var]) # area and elevation range 0.72, abs.lat and temperature 0.89
MyMultipanel.ggp2(dat, cont.var, vary = "presence", ylab = "proportion") # pretty hard to see what's going on
#dataset for broad proportion model including mainlands
gdat.ml.prop <- gdat.ref %>%
dplyr::select(c("entity_ID","nfix","nfixno", "latitude","abs.lat","longitude", # Select columns
"landtype","status","presence","area","elev_range","precipitation", "temperature"))%>%
filter(!landtype=="other_island")%>%                                          #remove islands with undetermined type
mutate(area = as.vector(log10((area)+.01)))%>%                                #log transform area
#find out rows that have no species counts
mutate(species = nfix + nfixno) %>%
filter(species > 0) %>%
drop_na() %>%
mutate_at(c("abs.lat","area","elev_range","precipitation","temperature"), scale) %>%  #scale all explanatory variables
#remove outliers
filter(precipitation < 3.5)
broad.prop.model<- glmer(cbind(nfix,nfixno)~landtype*status+abs.lat+area+elev_range+precipitation + temperature+ (1|entity_ID), data =gdat.ml.prop, family= binomial(link ="logit"))
#check correlations
dat <- gdat.ml.prop
names(gdat.ml.prop)
cont.var <- c("abs.lat", "elev_range","area","precipitation","temperature")
Mypairs(dat[,cont.var]) # area and elevation range 0.72, abs.lat and temperature 0.89
#without correlations
broad.prop.model<- glmer(cbind(nfix,nfixno)~landtype*status+abs.lat+area+elev_range+precipitation + (1|entity_ID), data =gdat.ml.prop, family= binomial(link ="logit"))
summary(broad.prop.model)
rac <- Spat.cor.rep(broad.prop.model,gdat.ml.prop,2000)
broad.prop.model.rac <- glm(cbind(nfix,nfixno)~landtype*status+abs.lat+area+elev_range+precipitation+rac, data = gdat.ml.prop, family = binomial(link ="logit")) #has to be exactly the same as the model but with +rac
summary(broad.prop.model.rac)
