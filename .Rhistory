geom_point(size=3) +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2, size=1.3) +
geom_hline(yintercept = 0, linetype = "dashed", color = "darkgrey") +
scale_color_manual(values = c("Model 4" = "coral", "Model 6" = "darkseagreen3")) +
labs(title = "Coefficient Estimates for Proportion on oceanic islands (M4 & M6)") +
theme_minimal() +
coord_flip()
oc_prop_est_plot
# Create the combined plot
oc_prop_est_plot<-
ggplot(combined_data, aes(x = term, y = estimate, color = model)) +
geom_point(size=3) +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2, size=1.2) +
geom_hline(yintercept = 0, linetype = "dashed", color = "darkgrey") +
scale_color_manual(values = c("Model 4" = "coral", "Model 6" = "darkseagreen3")) +
labs(title = "Coefficient Estimates for Proportion on oceanic islands (M4 & M6)") +
theme_minimal() +
coord_flip()
oc_prop_est_plot
#Saving the plot as a png
png("figures/M4M6_estimates_oc_prop.jpg", width=10, height= 9, units='in', res=300)
oc_prop_est_plot
dev.off()
dev.off()
# Create the combined plot
oc_prop_est_plot<-
ggplot(combined_data, aes(x = term, y = estimate, color = model)) +
geom_point(size=3) +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2, size=1.2) +
geom_hline(yintercept = 0, linetype = "dashed", color = "darkgrey") +
scale_color_manual(values = c("Model 4" = "coral", "Model 6" = "darkseagreen3")) +
labs(title = "Coefficient Estimates for Proportion on oceanic islands (M4 & M6)") +
theme_minimal() +
coord_flip()+
theme(axis.text.x = element_text(size = 14))
oc_prop_est_plot
#Saving the plot as a png
png("figures/M4M6_estimates_oc_prop.jpg", width=10, height= 9, units='in', res=300)
oc_prop_est_plot
dev.off()
dev.off()
#add distinction between models
coef_dataM3$model <- "Model 3"
#Load dataset and subset to only naturalized species and oceanic islands
gdat.isl.ntz <- gdat.ref %>%
dplyr::select(c("entity_ID","entity_class","nfix","nfixno", "latitude","abs.lat","longitude", # Select columns
"landtype","status","presence","area","dist","elev_range","precipitation", "temperature","urbanland"))%>%
filter(status=="naturalized")%>%
mutate(area = as.vector(log10((area)+.01)))%>%  #log10 transformation of area for models only; remove for figures
filter(landtype=="oceanic")%>%
drop_na()%>%
mutate_at(c("abs.lat","area","dist","elev_range","precipitation", "temperature","urbanland"), scale)#%>%  #scale all explanatory variables
#model with selected variables after stepwise regression
model.oc.pres<- glm(presence~abs.lat+area+dist+area:dist, data=gdat.isl.ntz, family=binomial(link ="logit"))
summary(model.oc.pres)
#model including spatial correlation variable (rac)
rac <- Spat.cor.rep(model.oc.pres,gdat.isl.ntz,2000)
model.oc.pres.rac<- glm(presence~ abs.lat+area+dist+area:dist+rac, data = gdat.isl.ntz, family = binomial(link ="logit")) #has to be exactly the same as the model but with +rac
summary(model.oc.pres.rac)
# convert the model output into a df
coef_dataM3 <- tidy(model.oc.pres.rac, conf.int = TRUE)
#create data subset for presence analysis
oceanic.pres.ntv <- gdat.isl.ntv%>%
filter(!entity_ID == "594")# one data point removed due to extreme residual outlier status (see below)
#M5 with only selected variables after stepwise regression
model.oc.pres <- glm(presence~ area + dist +precipitation+temperature , data=oceanic.pres.ntv, family=binomial(link ="logit"))
summary(model.oc.pres)
#model including spatial correlation variable (rac)
rac <- Spat.cor.rep(model.oc.pres,oceanic.pres.ntv,2000)
model.oc.pres.rac <- glm(presence~ area + dist +precipitation+temperature +rac, data = oceanic.pres.ntv, family = binomial(link ="logit"))
summary(model.oc.pres.rac)
# Tidy the model output
coef_dataM5 <- tidy(model.oc.pres.rac, conf.int = TRUE)
#add distinction between models
coef_dataM3$model <- "Model 3"
coef_dataM5$model <- "Model 5"
#combine estimates of both models into one df
combined_data <- rbind(coef_dataM3, coef_dataM5)
# Specify the order of variables
combined_data$term <- factor(combined_data$term, levels = c("rac","temperature", "precipitation","abs.lat","area:dist","dist","area", "(Intercept)"))
combined_data<- combined_data%>% filter(!term=="(Intercept)")#filter out intercept because variables are scaled
# Create the combined plot
oc_pres_est_plot<-
ggplot(combined_data, aes(x = term, y = estimate, color = model)) +
geom_point(size=3) +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2, size=1.2) +
geom_hline(yintercept = 0, linetype = "dashed", color = "darkgrey") +
scale_color_manual(values = c("Model 3" = "coral", "Model 5" = "darkseagreen3")) +
labs(title = "Coefficient Estimates for Presence on oceanic islands (M3 & M5)") +
theme_minimal() +
coord_flip()+
theme(axis.text.x = element_text(size = 14))
oc_pres_est_plot
#Saving the plot as a png
png("figures/M3M5_estimates_oc_pres.jpg", width=10, height= 9, units='in', res=300)
oc_pres_est_plot
dev.off()
oc_pres_est_plot
dev.off()
####Libraries and initial dataset####
# Load the necessary libraries
library(dplyr);library(segmented);library(nlme);library(mgcv);library(gridExtra);library(betareg);
library(MASS);library(lme4);library(lmerTest);library(lsmeans);library(ggeffects);library(spdep);
library(ggplot2);library(effects);library(ncf);library(ape);library(sjPlot);library(gridExtra);
library(MuMIn);library(tidyverse);library(car); library(V8); library(rsq); library(DHARMa); library(grateful);library(broom)
source("extra_functions.R")
options(na.action = "na.fail") #Change na. action
#Load dataset from data cleaning script
gdat.ref <- readRDS("data/fulldata_for_analysis_2024.rds") %>%
dplyr::select(c("entity_ID","entity_class","nfix","nfixno", "latitude","abs.lat","longitude", # Select columns
"landtype","status","presence","area","elev_range","precipitation","dist", "temperature","urbanland"))
#Load dataset and subset to only naturalized species and oceanic islands
gdat.isl.ntz <- gdat.ref %>%
dplyr::select(c("entity_ID","entity_class","nfix","nfixno", "latitude","abs.lat","longitude", # Select columns
"landtype","status","presence","area","dist","elev_range","precipitation", "temperature","urbanland"))%>%
filter(status=="naturalized")%>%
mutate(area = as.vector(log10((area)+.01)))%>%  #log10 transformation of area for models only; remove for figures
filter(landtype=="oceanic")%>%
drop_na()%>%
mutate_at(c("abs.lat","area","dist","elev_range","precipitation", "temperature","urbanland"), scale)#%>%  #scale all explanatory variables
#check correlations
dat <- gdat.isl.ntz
model.oc.pres.full<- glm(presence~abs.lat +elev_range	+precipitation+temperature	+area*dist +urbanland*dist, data=gdat.isl.ntz, family=binomial(link ="logit"))
summary(model.oc.pres.full)
#model including spatial correlation variable (rac)
rac <- Spat.cor.rep(model.oc.pres.full,gdat.isl.ntz,2000)
model.oc.pres.rac.full <- glm(presence~abs.lat +elev_range+precipitation+ temperature+area*dist +urbanland*dist+rac, data = gdat.isl.ntz, family = binomial(link ="logit")) #has to be exactly the same as the model but with +rac
summary(model.oc.pres.rac.full)
#model with selected variables after stepwise regression
model.oc.pres<- glm(presence~abs.lat+area+dist+area:dist, data=gdat.isl.ntz, family=binomial(link ="logit"))
summary(model.oc.pres)
#Correlogram to test distance of spatial autocorrelation
correlogram(model.oc.pres, gdat.isl.ntz, "figures/M3_ntzocpres_correlogram.jpg")
#model including spatial correlation variable (rac)
rac <- Spat.cor.rep(model.oc.pres,gdat.isl.ntz,2000)
model.oc.pres.rac<- glm(presence~ abs.lat+area+dist+area:dist+rac, data = gdat.isl.ntz, family = binomial(link ="logit")) #has to be exactly the same as the model but with +rac
summary(model.oc.pres.rac)
# convert the model output into a df
coef_dataM3 <- tidy(model.oc.pres.rac, conf.int = TRUE)
#check variance inflation factor
vif(model.oc.pres.rac)
#Figure area:distance interaction
#create a color scale
colScale <- scale_colour_manual(values =c ("coral","coral2","coral3","sandybrown"))
fillScale <- scale_fill_manual(values =c ("coral","coral2","coral3","coral"))
model.oc.pres.rac$area
sd(gdat.isl.ntz$area)
area.minmax <- data.frame(area = c(mean(gdat.isl.ntz$area)-sd(gdat.isl.ntz$area),mean(gdat.isl.ntz$area),mean(gdat.isl.ntz$area)+sd(gdat.isl.ntz$area)), size =c ("small", "medium","large"))
dist.range <- with(gdat.isl.ntz, expand.grid(dist = seq(min(dist), max(dist), length = 1000)))
ex.grid <- expand.grid(area = area.minmax$area, dist = dist.range$dist)
pred.dat <- ex.grid %>% mutate(rac = mean(rac), abs.lat= mean(gdat.isl.ntz$abs.lat))
pred <- predict.glm(model.oc.pres.rac,type="response",newdata = pred.dat,se=TRUE)
pdat <- cbind(ex.grid,pred) %>%
left_join(area.minmax)
#Load dataset and subset to only naturalized species and oceanic islands
gdat.isl.ntz <- gdat.ref %>%
dplyr::select(c("entity_ID","entity_class","nfix","nfixno", "latitude","abs.lat","longitude", # Select columns
"landtype","status","presence","area","dist","elev_range","precipitation", "temperature","urbanland"))%>%
filter(status=="naturalized")%>%
mutate(area = as.vector(log10((area)+.01)))%>%  #log10 transformation of area for models only; remove for figures
filter(landtype=="oceanic")%>%
drop_na()#%>%
model.oc.pres.full<- glm(presence~abs.lat +elev_range	+precipitation+temperature	+area*dist +urbanland*dist, data=gdat.isl.ntz, family=binomial(link ="logit"))
summary(model.oc.pres.full)
#model including spatial correlation variable (rac)
rac <- Spat.cor.rep(model.oc.pres.full,gdat.isl.ntz,2000)
model.oc.pres.rac.full <- glm(presence~abs.lat +elev_range+precipitation+ temperature+area*dist +urbanland*dist+rac, data = gdat.isl.ntz, family = binomial(link ="logit")) #has to be exactly the same as the model but with +rac
summary(model.oc.pres.rac.full)
#model with selected variables after stepwise regression
model.oc.pres<- glm(presence~abs.lat+area+dist+area:dist, data=gdat.isl.ntz, family=binomial(link ="logit"))
summary(model.oc.pres)
#Correlogram to test distance of spatial autocorrelation
correlogram(model.oc.pres, gdat.isl.ntz, "figures/M3_ntzocpres_correlogram.jpg")
#model including spatial correlation variable (rac)
rac <- Spat.cor.rep(model.oc.pres,gdat.isl.ntz,2000)
model.oc.pres.rac<- glm(presence~ abs.lat+area+dist+area:dist+rac, data = gdat.isl.ntz, family = binomial(link ="logit")) #has to be exactly the same as the model but with +rac
summary(model.oc.pres.rac)
# convert the model output into a df
coef_dataM3 <- tidy(model.oc.pres.rac, conf.int = TRUE)
#check variance inflation factor
vif(model.oc.pres.rac)
#check model assumptions
simulationOutput <- simulateResiduals(fittedModel = model.oc.pres.rac, plot = F)
#access residuals:
residuals(simulationOutput)
#qqplot
plotQQunif(simulationOutput)
#residuals
plotResiduals(simulationOutput)
#overdispersion
testDispersion(simulationOutput)
#zero inflation
testZeroInflation(simulationOutput)
#check residuals for each variable separately
E2 <- resid(model.oc.pres.rac, type = "pearson")
#list of variables: abs.lat, area, dist
plot(E2 ~ abs.lat, data = gdat.isl.ntz)
var.plot<- ggeffect(model.oc.pres.rac, terms=c("abs.lat"), type="re")
effect.plot<- plot(var.plot, colors="coral")
effect.plot
#Figure area:distance interaction
#create a color scale
colScale <- scale_colour_manual(values =c ("coral","coral2","coral3","sandybrown"))
fillScale <- scale_fill_manual(values =c ("coral","coral2","coral3","coral"))
model.oc.pres.rac$area
sd(gdat.isl.ntz$area)
area.minmax <- data.frame(area = c(mean(gdat.isl.ntz$area)-sd(gdat.isl.ntz$area),mean(gdat.isl.ntz$area),mean(gdat.isl.ntz$area)+sd(gdat.isl.ntz$area)), size =c ("small", "medium","large"))
dist.range <- with(gdat.isl.ntz, expand.grid(dist = seq(min(dist), max(dist), length = 1000)))
ex.grid <- expand.grid(area = area.minmax$area, dist = dist.range$dist)
pred.dat <- ex.grid %>% mutate(rac = mean(rac), abs.lat= mean(gdat.isl.ntz$abs.lat))
pred <- predict.glm(model.oc.pres.rac,type="response",newdata = pred.dat,se=TRUE)
pdat <- cbind(ex.grid,pred) %>%
left_join(area.minmax)
#plot the area distance interaction
areadist_oc_pres_ntz_plot<- ggplot(pdat, aes(x = dist, y = fit, fill=size, color=size))+
geom_line() +
geom_ribbon(aes(ymin=fit-se.fit, ymax=fit+se.fit), alpha=0.7)+
#geom_point(data=gdat.isl.ntz, mapping=aes(x=dist, y=presence),alpha=0.2, size=2)+
theme_minimal()+
labs(y="Probability of N-fixing plant species")+
xlab("Distance [km]")+
theme(axis.text.y=element_text(size=30))+
theme(axis.text.x=element_text(size=30))+
theme(axis.title.y=element_text(size=30))+
theme(axis.title.x=element_text(size=30))+
colScale+
fillScale+
ylim(0,1)+
theme(legend.key.size = unit(1, 'cm'), #change legend key size
legend.key.height = unit(1, 'cm'), #change legend key height
legend.key.width = unit(1, 'cm'), #change legend key width
legend.title = element_text(size=34), #change legend title font size
legend.text = element_text(size=30),#change legend text font size
legend.position = c(0.2, 0.85)) #change legend position
areadist_oc_pres_ntz_plot
#Saving the plot as a png
png("figures/M3_areadist_interaction.jpg", width=10, height= 10, units='in', res=300)
areadist_oc_pres_ntz_plot
dev.off()
dev.off()
View(areadist_oc_pres_ntz_plot)
area.minmax <- data.frame(area = c(mean(gdat.isl.ntz$area)-sd(gdat.isl.ntz$area),mean(gdat.isl.ntz$area),mean(gdat.isl.ntz$area)+sd(gdat.isl.ntz$area)), size =c ("small", "medium","large"))
View(area.minmax)
dist.range <- with(gdat.isl.ntz, expand.grid(dist = seq(min(dist), max(dist), length = 1000)))
ex.grid <- expand.grid(area = area.minmax$area, dist = dist.range$dist)
View(ex.grid)
pred.dat <- ex.grid %>% mutate(rac = mean(rac), abs.lat= mean(gdat.isl.ntz$abs.lat))
pred <- predict.glm(model.oc.pres.rac,type="response",newdata = pred.dat,se=TRUE)
pdat <- cbind(ex.grid,pred) %>%
left_join(area.minmax)
View(pdat)
pdatcount<- pdat%>% filter(size=="large")
View(pdatcount)
pdatcount<- pdat%>% filter(size=="small")
pdatcount<- pdat%>% filter(size=="medium")
model.oc.pres.full<- glm(presence~abs.lat +elev_range	+precipitation+temperature	+area*dist +urbanland*dist, data=gdat.isl.ntz, family=binomial(link ="logit"))
summary(model.oc.pres.full)
#model including spatial correlation variable (rac)
rac <- Spat.cor.rep(model.oc.pres.full,gdat.isl.ntz,2000)
model.oc.pres.rac.full <- glm(presence~abs.lat +elev_range+precipitation+ temperature+area*dist +urbanland*dist+rac, data = gdat.isl.ntz, family = binomial(link ="logit")) #has to be exactly the same as the model but with +rac
summary(model.oc.pres.rac.full)
#Figure area:distance interaction
#create a color scale
colScale <- scale_colour_manual(values =c ("coral","coral2","coral3","sandybrown"))
fillScale <- scale_fill_manual(values =c ("coral","coral2","coral3","coral"))
model.oc.pres.rac$area
sd(gdat.isl.ntz$area)
area.minmax <- data.frame(area = c(mean(gdat.isl.ntz$area)-sd(gdat.isl.ntz$area),mean(gdat.isl.ntz$area),mean(gdat.isl.ntz$area)+sd(gdat.isl.ntz$area)), size =c ("small", "medium","large"))
dist.range <- with(gdat.isl.ntz, expand.grid(dist = seq(min(dist), max(dist), length = 1000)))
ex.grid <- expand.grid(area = area.minmax$area, dist = dist.range$dist)
pred.dat <- ex.grid %>% mutate(rac = mean(rac), abs.lat= mean(gdat.isl.ntz$abs.lat))
pred <- predict.glm(model.oc.pres.rac,type="response",newdata = pred.dat,se=TRUE)
pdat <- cbind(ex.grid,pred) %>%
left_join(area.minmax)
#plot the area distance interaction
areadist_oc_pres_ntz_plot<- ggplot(pdat, aes(x = dist, y = fit, fill=size, color=size))+
geom_line() +
geom_ribbon(aes(ymin=fit-se.fit, ymax=fit+se.fit), alpha=0.7)+
#geom_point(data=gdat.isl.ntz, mapping=aes(x=dist, y=presence),alpha=0.2, size=2)+
theme_minimal()+
labs(y="Probability of N-fixing plant species")+
xlab("Distance [km]")+
theme(axis.text.y=element_text(size=30))+
theme(axis.text.x=element_text(size=30))+
theme(axis.title.y=element_text(size=30))+
theme(axis.title.x=element_text(size=30))+
colScale+
fillScale+
ylim(0,1)+
theme(legend.key.size = unit(1, 'cm'), #change legend key size
legend.key.height = unit(1, 'cm'), #change legend key height
legend.key.width = unit(1, 'cm'), #change legend key width
legend.title = element_text(size=34), #change legend title font size
legend.text = element_text(size=30),#change legend text font size
legend.position = c(0.2, 0.85)) #change legend position
areadist_oc_pres_ntz_plot
#Load dataset and subset to only native species and oceanic islands
gdat.isl.ntv <- gdat.ref %>%
dplyr::select(c("entity_ID","entity_class","nfix","nfixno", "latitude","abs.lat","longitude", # Select columns
"landtype","status","presence","area","dist","elev_range","precipitation", "temperature"))%>%
filter(status=="native")%>%
#filter(area>6)%>%
add_row(entity_ID = 0000, entity_class="Island", area=6)%>% # breakpoint
mutate(area = as.vector(log10((area)+.01)))%>%  #log10 transformation of area for models only; remove for figs
filter(landtype=="oceanic")%>%
drop_na()%>%
mutate_at(c("abs.lat","area","dist","elev_range","precipitation", "temperature"), scale)  #scale all explanatory variables
#create data subset for presence analysis
oceanic.pres.ntv <- gdat.isl.ntv%>%
filter(!entity_ID == "594")# one data point removed due to extreme residual outlier status (see below)
#check correlations
dat <- oceanic.pres.ntv
#M5 with only selected variables after stepwise regression
model.oc.pres <- glm(presence~ area + dist +precipitation+temperature , data=oceanic.pres.ntv, family=binomial(link ="logit"))
summary(model.oc.pres)
#Correlogram to test distance of spatial autocorrelation
correlogram(model.oc.pres, oceanic.pres.ntv, "figures/M5_ntvocpres_correlogram.jpg")
#model including spatial correlation variable (rac)
rac <- Spat.cor.rep(model.oc.pres,oceanic.pres.ntv,2000)
model.oc.pres.rac <- glm(presence~ area + dist +precipitation+temperature +rac, data = oceanic.pres.ntv, family = binomial(link ="logit"))
summary(model.oc.pres.rac)
#distance plot
new.dat.oc <- with(oceanic.pres.ntv, expand.grid(dist = seq(min(dist), max(dist), length = 1000))) %>%
mutate(rac = mean(rac), abs.lat= mean(oceanic.pres.ntv$abs.lat), area=mean(oceanic.pres.ntv$area), elev_range=mean(oceanic.pres.ntv$elev_range), precipitation=mean(oceanic.pres.ntv$precipitation)) #CREATE range for area from min to max value
pred.ml <- predict(model.oc.pres.rac, newdata = new.dat.oc, type = "response", se = TRUE) %>% # create new dataframe where area changes and all other variables are kept on mean
as.data.frame() %>%
mutate(dist = new.dat.oc$dist, landtype = "oceanic")
#distance plot
new.dat.oc <- with(oceanic.pres.ntv, expand.grid(dist = seq(min(dist), max(dist), length = 1000))) %>%
mutate(rac = mean(rac), abs.lat= mean(oceanic.pres.ntv$abs.lat), area=mean(oceanic.pres.ntv$area), temperature=mean(oceanic.pres.ntv$temperature), precipitation=mean(oceanic.pres.ntv$precipitation)) #CREATE range for area from min to max value
pred.ml <- predict(model.oc.pres.rac, newdata = new.dat.oc, type = "response", se = TRUE) %>% # create new dataframe where area changes and all other variables are kept on mean
as.data.frame() %>%
mutate(dist = new.dat.oc$dist, landtype = "oceanic")
gdat.isl.ntv <- gdat.ref %>%
dplyr::select(c("entity_ID","entity_class","nfix","nfixno", "latitude","abs.lat","longitude", # Select columns
"landtype","status","presence","area","dist","elev_range","precipitation", "temperature"))%>%
filter(status=="native")%>%
#filter(area>6)%>%
add_row(entity_ID = 0000, entity_class="Island", area=6)%>% # breakpoint
mutate(area = as.vector(log10((area)+.01)))%>%  #log10 transformation of area for models only; remove for figs
filter(landtype=="oceanic")%>%
drop_na()
#M5
model.oc.pres.full <- glm(presence~abs.lat + area + dist +elev_range +precipitation+temperature +area:dist , data=oceanic.pres.ntv, family=binomial(link ="logit"))
summary(model.oc.pres.full)
#model including spatial correlation variable (rac)
rac <- Spat.cor.rep(model.oc.pres.full,oceanic.pres.ntv,2000)
model.oc.pres.rac.full <- glm(presence~abs.lat + area + dist +elev_range +precipitation+temperature +area:dist +rac, data = oceanic.pres.ntv, family = binomial(link ="logit"))
#M5 with only selected variables after stepwise regression
model.oc.pres <- glm(presence~ area + dist +precipitation+temperature , data=oceanic.pres.ntv, family=binomial(link ="logit"))
summary(model.oc.pres)
#model including spatial correlation variable (rac)
rac <- Spat.cor.rep(model.oc.pres,oceanic.pres.ntv,2000)
model.oc.pres.rac <- glm(presence~ area + dist +precipitation+temperature +rac, data = oceanic.pres.ntv, family = binomial(link ="logit"))
summary(model.oc.pres.rac)
#distance plot
new.dat.oc <- with(oceanic.pres.ntv, expand.grid(dist = seq(min(dist), max(dist), length = 1000))) %>%
mutate(rac = mean(rac), abs.lat= mean(oceanic.pres.ntv$abs.lat), area=mean(oceanic.pres.ntv$area), temperature=mean(oceanic.pres.ntv$temperature), precipitation=mean(oceanic.pres.ntv$precipitation)) #CREATE range for area from min to max value
pred.ml <- predict(model.oc.pres.rac, newdata = new.dat.oc, type = "response", se = TRUE) %>% # create new dataframe where area changes and all other variables are kept on mean
as.data.frame() %>%
mutate(dist = new.dat.oc$dist, landtype = "oceanic")
oc_pres_native_dist_plot<-ggplot(pred.ml, aes(x = dist, y = fit))+
geom_line(color="darkseagreen3") +
geom_ribbon(aes(ymin=fit-se.fit, ymax=fit+se.fit), alpha=0.7,color="darkseagreen3", fill="darkseagreen3")+
#geom_point(data=oceanic.pres, mapping=aes(x=dist, y=presence),alpha=0.2, size=2,color="coral", fill="coral")+
theme_minimal()+
labs(y="Probability of N-fixing plants")+
xlab("Distance [km]")+
theme(axis.text.y=element_text(size=30))+
theme(axis.text.x=element_text(size=30))+
theme(axis.title.y=element_text(size=30))+
theme(axis.title.x=element_text(size=30))
oc_pres_native_dist_plot
#Load dataset and subset to only native species and oceanic islands
gdat.isl.ntv <- gdat.ref %>%
dplyr::select(c("entity_ID","entity_class","nfix","nfixno", "latitude","abs.lat","longitude", # Select columns
"landtype","status","presence","area","dist","elev_range","precipitation", "temperature"))%>%
filter(status=="native")%>%
#filter(area>6)%>%
add_row(entity_ID = 0000, entity_class="Island", area=6)%>% # breakpoint
mutate(area = as.vector(log10((area)+.01)))%>%  #log10 transformation of area for models only; remove for figs
filter(landtype=="oceanic")%>%
drop_na()#%>%
#create data subset for presence analysis
oceanic.pres.ntv <- gdat.isl.ntv%>%
filter(!entity_ID == "594")# one data point removed due to extreme residual outlier status (see below)
#M5 with only selected variables after stepwise regression
model.oc.pres <- glm(presence~ area + dist +precipitation+temperature , data=oceanic.pres.ntv, family=binomial(link ="logit"))
summary(model.oc.pres)
#model including spatial correlation variable (rac)
rac <- Spat.cor.rep(model.oc.pres,oceanic.pres.ntv,2000)
model.oc.pres.rac <- glm(presence~ area + dist +precipitation+temperature +rac, data = oceanic.pres.ntv, family = binomial(link ="logit"))
summary(model.oc.pres.rac)
#distance plot
new.dat.oc <- with(oceanic.pres.ntv, expand.grid(dist = seq(min(dist), max(dist), length = 1000))) %>%
mutate(rac = mean(rac), abs.lat= mean(oceanic.pres.ntv$abs.lat), area=mean(oceanic.pres.ntv$area), temperature=mean(oceanic.pres.ntv$temperature), precipitation=mean(oceanic.pres.ntv$precipitation)) #CREATE range for area from min to max value
pred.ml <- predict(model.oc.pres.rac, newdata = new.dat.oc, type = "response", se = TRUE) %>% # create new dataframe where area changes and all other variables are kept on mean
as.data.frame() %>%
mutate(dist = new.dat.oc$dist, landtype = "oceanic")
oc_pres_native_dist_plot<-ggplot(pred.ml, aes(x = dist, y = fit))+
geom_line(color="darkseagreen3") +
geom_ribbon(aes(ymin=fit-se.fit, ymax=fit+se.fit), alpha=0.7,color="darkseagreen3", fill="darkseagreen3")+
#geom_point(data=oceanic.pres, mapping=aes(x=dist, y=presence),alpha=0.2, size=2,color="coral", fill="coral")+
theme_minimal()+
labs(y="Probability of N-fixing plants")+
xlab("Distance [km]")+
theme(axis.text.y=element_text(size=30))+
theme(axis.text.x=element_text(size=30))+
theme(axis.title.y=element_text(size=30))+
theme(axis.title.x=element_text(size=30))
oc_pres_native_dist_plot
#Saving the plot as a png
png("figures/M5_dist_oc_pres_ntv.jpg", width=10, height= 10, units='in', res=300)
oc_pres_native_dist_plot
dev.off()
dev.off()
gdat.isl.ntz
#BiocManager:
BiocManager::install("dada2", version = "3.14")
#BiocManager:
BiocManager::install("dada2", version = "3.18")
library(dada2); packageVersion("dada2")
# Load the necessary libraries
library(dplyr);library(segmented);library(nlme);library(mgcv);library(gridExtra);library(betareg);
library(MASS);library(lme4);library(lmerTest);library(lsmeans);library(ggeffects);library(spdep);
library(ggplot2);library(effects);library(ncf);library(ape);library(sjPlot);library(gridExtra);
library(MuMIn);library(tidyverse);library(car); library(V8); library(rsq); library(DHARMa); library(grateful);library(broom)
source("extra_functions.R")
options(na.action = "na.fail") #Change na. action
#Load dataset from data cleaning script
gdat.ref <- readRDS("data/fulldata_for_analysis_2024.rds") %>%
dplyr::select(c("entity_ID","entity_class","nfix","nfixno", "latitude","abs.lat","longitude", # Select columns
"landtype","status","presence","area","elev_range","precipitation","dist", "temperature","urbanland"))
#dataset for broad presence model including mainlands
gdat.ml.pres <- gdat.ref %>%
dplyr::select(c("entity_ID","nfix","nfixno", "latitude","abs.lat","longitude", # Select columns
"landtype","status","presence","area","elev_range","precipitation","temperature"))%>%
filter(!landtype=="other_island")%>%                                          #remove islands with undetermined type
mutate(area = as.vector(log10((area)+.01)))%>%                                #log transform area
drop_na()%>%
mutate_at(c("abs.lat","area","elev_range","precipitation", "temperature"), scale) #scale all explanatory variables
ml<- gdat.ml.pres%>% filter(landtype==mainland)
ml<- gdat.ml.pres%>% filter(landtype== Mainland)
View(gdat.ml.pres)
ml<- gdat.ml.pres%>% filter(landtype== "mainland")
nocisl<- gdat.ml.pres%>% filter(landtype== "nonoceanic")
ocisl<- gdat.ml.pres%>% filter(landtype== "oceanic")
ml<- gdat.ml.pres%>% filter(status=="native"%>%filter(landtype== "mainland")
ml<- gdat.ml.pres%>% filter(status=="native")%>%filter(landtype== "mainland")
ml<- gdat.ml.pres%>% filter(status=="native")%>%filter(landtype== "mainland")
ml<- gdat.ml.pres%>% filter(status=="naturalized")%>%filter(landtype== "mainland")
nocisl<- gdat.ml.pres%>%filter(status=="naturalized") %>%filter(landtype== "nonoceanic")
ocisl<- gdat.ml.pres%>%filter(status=="naturalized") %>%filter(landtype== "oceanic")
#dataset for M2 broad proportion model including mainlands
gdat.ml.prop <- gdat.ref %>%
dplyr::select(c("entity_ID","nfix","nfixno", "latitude","abs.lat","longitude", # Select columns
"landtype","status","presence","area","elev_range","precipitation", "temperature"))%>%
filter(!landtype=="other_island")%>%                                          #remove islands with undetermined type
mutate(area = as.vector(log10((area)+.01)))%>%                                #log transform area
mutate(species = nfix + nfixno) %>%   #find out rows that have no species counts
filter(species > 0) %>%
drop_na() %>%
mutate_at(c("abs.lat","area","elev_range","precipitation","temperature"), scale) %>%  #scale all explanatory variables
filter(precipitation < 3.5)   #remove outliers
ml<- gdat.ml.prop%>% filter(status=="naturalized")%>%filter(landtype== "mainland")
nocisl<- gdat.ml.prop%>%filter(status=="naturalized") %>%filter(landtype== "nonoceanic")
ocisl<- gdat.ml.prop%>%filter(status=="naturalized") %>%filter(landtype== "oceanic")
ml<- gdat.ml.prop%>% filter(status=="native")%>%filter(landtype== "mainland")
nocisl<- gdat.ml.prop%>%filter(status=="native") %>%filter(landtype== "nonoceanic")
ocisl<- gdat.ml.prop%>%filter(status=="native") %>%filter(landtype== "oceanic")
ml<- gdat.ml.prop%>% filter(status=="naturalized")%>%filter(landtype== "mainland")
nocisl<- gdat.ml.prop%>%filter(status=="naturalized") %>%filter(landtype== "nonoceanic")
ocisl<- gdat.ml.prop%>%filter(status=="naturalized") %>%filter(landtype== "oceanic")
#Load dataset and subset to only naturalized species and oceanic islands
gdat.isl.ntz <- gdat.ref %>%
dplyr::select(c("entity_ID","entity_class","nfix","nfixno", "latitude","abs.lat","longitude", # Select columns
"landtype","status","presence","area","dist","elev_range","precipitation", "temperature","urbanland"))%>%
filter(status=="naturalized")%>%
mutate(area = as.vector(log10((area)+.01)))%>%  #log10 transformation of area for models only; remove for figures
filter(landtype=="oceanic")%>%
drop_na()%>%
mutate_at(c("abs.lat","area","dist","elev_range","precipitation", "temperature","urbanland"), scale)#%>%  #scale all explanatory variables
#check correlations
dat <- gdat.isl.ntz
#load data and filter out all locations without species counts
oceanic.prop<-gdat.isl.ntz%>%
mutate(species = nfix + nfixno)%>%
filter(species >0)%>%
filter(precipitation< 4) #take out outlier (only do this in scaled version for modelling remove when creating figures)
#Load dataset and subset to only native species and oceanic islands
gdat.isl.ntv <- gdat.ref %>%
dplyr::select(c("entity_ID","entity_class","nfix","nfixno", "latitude","abs.lat","longitude", # Select columns
"landtype","status","presence","area","dist","elev_range","precipitation", "temperature"))%>%
filter(status=="native")%>%
#filter(area>6)%>%
add_row(entity_ID = 0000, entity_class="Island", area=6)%>% # breakpoint
mutate(area = as.vector(log10((area)+.01)))%>%  #log10 transformation of area for models only; remove for figs
filter(landtype=="oceanic")%>%
drop_na()%>%
mutate_at(c("abs.lat","area","dist","elev_range","precipitation", "temperature"), scale)  #scale all explanatory variables
#create data subset for presence analysis
oceanic.pres.ntv <- gdat.isl.ntv%>%
filter(!entity_ID == "594")# one data point removed due to extreme residual outlier status (see below)
#subset data for proportion analysis
oceanic.prop.ntv <- gdat.isl.ntv%>%
#remove outliers
filter(!entity_ID == 675) %>%
filter(!entity_ID == 921) %>%
filter(!entity_ID == 11474)%>%
mutate(species = nfix + nfixno)%>% #find out values that have no species counts
filter(species > 0)%>%
filter(precipitation<4)
