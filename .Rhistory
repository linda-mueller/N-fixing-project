legend.key.height = unit(1, 'cm'),    #change legend key height
legend.key.width = unit(1, 'cm'),     #change legend key width
legend.title = element_text(size=34), #change legend title font size
legend.text = element_text(size=30),  #change legend text font size
legend.position =  c(0.2, 0.85))       #change legend position
areadist_oc_pres_ntz_plot
#plot the area distance interaction position=position_jitterdodge(dodge.width = 1)
areadist_oc_pres_ntz_plot<- ggplot(pdat, aes(x = dist, y = fit, fill=size, color=size))+
geom_line() +
geom_ribbon(aes(ymin=fit-se.fit, ymax=fit+se.fit), alpha=0.4)+
geom_point(data = gdat.isl.ntz,aes(x=dist,y=presence, color=areasize, fill=areasize),alpha=0.4,show.legend = FALSE)+
theme_minimal()+
labs(y="Probability of N-fixing plant species")+
xlab("Distance [km]")+
theme(axis.text.y=element_text(size=30))+
theme(axis.text.x=element_text(size=30))+
theme(axis.title.y=element_text(size=30))+
theme(axis.title.x=element_text(size=30))+
colo+
filo+
ylim(0,1)+
guides(
color = guide_legend(title = "Size"),  # Combine color legend
fill = guide_legend(title = "Size")  # Ensure fill uses the same legend title
) +
theme(legend.key.size = unit(1, 'cm'),      #change legend key size
legend.key.height = unit(1, 'cm'),    #change legend key height
legend.key.width = unit(1, 'cm'),     #change legend key width
legend.title = element_text(size=34), #change legend title font size
legend.text = element_text(size=30),  #change legend text font size
legend.position =  c(0.2, 0.85))       #change legend position
areadist_oc_pres_ntz_plot
#plot the area distance interaction position=position_jitterdodge(dodge.width = 1)
areadist_oc_pres_ntz_plot<- ggplot(pdat, aes(x = dist, y = fit, fill=size, color=size))+
geom_line() +
geom_ribbon(aes(ymin=fit-se.fit, ymax=fit+se.fit), alpha=0.4)+
geom_point(data = gdat.isl.ntz,aes(x=dist,y=presence, color=areasize, fill=areasize),alpha=0.4,show.legend = FALSE)+
theme_minimal()+
labs(y="Probability of N-fixing plant species")+
xlab("Distance [km]")+
theme(axis.text.y=element_text(size=30))+
theme(axis.text.x=element_text(size=30))+
theme(axis.title.y=element_text(size=30))+
theme(axis.title.x=element_text(size=30))+
colo+
filo+
ylim(0,1)+
guides(
color = guide_legend(title = ""),  # Combine color legend
fill = guide_legend(title = "")  # Ensure fill uses the same legend title
) +
theme(legend.key.size = unit(1, 'cm'),      #change legend key size
legend.key.height = unit(1, 'cm'),    #change legend key height
legend.key.width = unit(1, 'cm'),     #change legend key width
legend.title = element_text(size=34), #change legend title font size
legend.text = element_text(size=30),  #change legend text font size
legend.position =  c(0.2, 0.85))       #change legend position
areadist_oc_pres_ntz_plot
# Add size column with custom breakpoints
gdat.isl.ntz$areasize <- cut(gdat.isl.ntz$area,
breaks = breakpoints,
labels = c("small", "medium", "large"))
gdat.isl.ntz$areasize <- factor(gdat.isl.ntz$areasize, levels = c("large", "medium", "small"))
colo<-scale_color_manual(values = c("small" = "darkred", "medium" = "brown2", "large" = "coral"))
filo<-scale_fill_manual(values = c("small" = "darkred", "medium" = "brown2", "large" = "coral"))
#plot the area distance interaction position=position_jitterdodge(dodge.width = 1)
areadist_oc_pres_ntz_plot<- ggplot(pdat, aes(x = dist, y = fit, fill=size, color=size))+
geom_line() +
geom_ribbon(aes(ymin=fit-se.fit, ymax=fit+se.fit), alpha=0.4)+
geom_point(data = gdat.isl.ntz,aes(x=dist,y=presence, color=areasize, fill=areasize),alpha=0.4,show.legend = FALSE)+
theme_minimal()+
labs(y="Probability of N-fixing plant species")+
xlab("Distance [km]")+
theme(axis.text.y=element_text(size=30))+
theme(axis.text.x=element_text(size=30))+
theme(axis.title.y=element_text(size=30))+
theme(axis.title.x=element_text(size=30))+
colo+
filo+
ylim(0,1)+
guides(
color = guide_legend(title = ""),  # Combine color legend
fill = guide_legend(title = "")  # Ensure fill uses the same legend title
) +
theme(legend.key.size = unit(1, 'cm'),      #change legend key size
legend.key.height = unit(1, 'cm'),    #change legend key height
legend.key.width = unit(1, 'cm'),     #change legend key width
legend.title = element_text(size=34), #change legend title font size
legend.text = element_text(size=30),  #change legend text font size
legend.position =  c(0.2, 0.85))       #change legend position
areadist_oc_pres_ntz_plot
#Saving the plot as a png
png("figures/M3_areadist_interaction.jpg", width=10, height= 10, units='in', res=300)
areadist_oc_pres_ntz_plot
dev.off()
dev.off()
oc_pres_native_dist_plot<-ggplot(pred.ml, aes(x = dist, y = fit))+
geom_line(color="darkcyan") +
geom_ribbon(aes(ymin=fit-se.fit, ymax=fit+se.fit), alpha=0.4,color="darkcyan", fill="darkcyan")+
geom_point(data = gdat.isl.ntv,aes(x=dist,y=presence, color="darkcyan", fill="darkcyan"),alpha=0.4,show.legend = FALSE)+
theme_minimal()+
labs(y="Probability of N-fixing plants")+
xlab("Distance [km]")+
theme(axis.text.y=element_text(size=30))+
theme(axis.text.x=element_text(size=30))+
theme(axis.title.y=element_text(size=30))+
theme(axis.title.x=element_text(size=30))
oc_pres_native_dist_plot
#distance plot
new.dat.oc <- with(oceanic.pres.ntv, expand.grid(dist = seq(min(dist), max(dist), length = 1000))) %>%
mutate(rac = mean(rac), abs.lat= mean(oceanic.pres.ntv$abs.lat), area=mean(oceanic.pres.ntv$area), temperature= mean(oceanic.pres.ntv$temperature), precipitation=mean(oceanic.pres.ntv$precipitation)) #CREATE range for area from min to max value
pred.ml <- predict(model.oc.pres.rac, newdata = new.dat.oc, type = "response", se = TRUE) %>% # create new dataframe where area changes and all other variables are kept on mean
as.data.frame() %>%
mutate(dist = new.dat.oc$dist, landtype = "oceanic")
oc_pres_native_dist_plot<-ggplot(pred.ml, aes(x = dist, y = fit))+
geom_line(color="darkcyan") +
geom_ribbon(aes(ymin=fit-se.fit, ymax=fit+se.fit), alpha=0.4,color="darkcyan", fill="darkcyan")+
geom_point(data = gdat.isl.ntv,aes(x=dist,y=presence, color="darkcyan", fill="darkcyan"),alpha=0.4)+
theme_minimal()+
labs(y="Probability of N-fixing plants")+
xlab("Distance [km]")+
theme(axis.text.y=element_text(size=30))+
theme(axis.text.x=element_text(size=30))+
theme(axis.title.y=element_text(size=30))+
theme(axis.title.x=element_text(size=30))
oc_pres_native_dist_plot
oc_pres_native_dist_plot<-ggplot(pred.ml, aes(x = dist, y = fit))+
geom_line(color="darkcyan") +
geom_ribbon(aes(ymin=fit-se.fit, ymax=fit+se.fit), alpha=0.4,color="darkcyan", fill="darkcyan")+
geom_point(data = gdat.isl.ntv,aes(x=dist,y=presence) color="darkcyan", fill="darkcyan",alpha=0.4)+
oc_pres_native_dist_plot<-ggplot(pred.ml, aes(x = dist, y = fit))+
geom_line(color="darkcyan") +
geom_ribbon(aes(ymin=fit-se.fit, ymax=fit+se.fit), alpha=0.4,color="darkcyan", fill="darkcyan")+
geom_point(data = gdat.isl.ntv,aes(x=dist,y=presence), color="darkcyan", fill="darkcyan",alpha=0.4)+
theme_minimal()+
labs(y="Probability of N-fixing plants")+
xlab("Distance [km]")+
theme(axis.text.y=element_text(size=30))+
theme(axis.text.x=element_text(size=30))+
theme(axis.title.y=element_text(size=30))+
theme(axis.title.x=element_text(size=30))
oc_pres_native_dist_plot
oc_pres_native_dist_plot<-ggplot(pred.ml, aes(x = dist, y = fit))+
geom_line(color="darkcyan") +
geom_ribbon(aes(ymin=fit-se.fit, ymax=fit+se.fit), alpha=0.3,color="darkcyan", fill="darkcyan")+
geom_point(data = gdat.isl.ntv,aes(x=dist,y=presence), color="darkcyan", fill="darkcyan",alpha=0.4)+
theme_minimal()+
labs(y="Probability of N-fixing plants")+
xlab("Distance [km]")+
theme(axis.text.y=element_text(size=30))+
theme(axis.text.x=element_text(size=30))+
theme(axis.title.y=element_text(size=30))+
theme(axis.title.x=element_text(size=30))
oc_pres_native_dist_plot
#Saving the plot as a png
png("figures/M5_dist_oc_pres_ntvpoints.jpg", width=10, height= 10, units='in', res=300)
oc_pres_native_dist_plot
dev.off()
dev.off()
oc_pres_native_dist_plot<-ggplot(pred.ml, aes(x = dist, y = fit))+
geom_line(color="darkcyan") +
geom_ribbon(aes(ymin=fit-se.fit, ymax=fit+se.fit), alpha=0.3,color="darkcyan", fill="darkcyan")+
geom_point(data = gdat.isl.ntv,aes(x=dist,y=presence), color="darkcyan", fill="darkcyan",alpha=0.4)+
theme_minimal()+
labs(y="Probability of N-fixing plants")+
xlab("Distance [km]")+
theme(axis.text.y=element_text(size=30))+
theme(axis.text.x=element_text(size=30))+
theme(axis.title.y=element_text(size=30))+
theme(axis.title.x=element_text(size=30),margin = margin(t = 20))
oc_pres_native_dist_plot
oc_pres_native_dist_plot<-ggplot(pred.ml, aes(x = dist, y = fit))+
geom_line(color="darkcyan") +
geom_ribbon(aes(ymin=fit-se.fit, ymax=fit+se.fit), alpha=0.3,color="darkcyan", fill="darkcyan")+
geom_point(data = gdat.isl.ntv,aes(x=dist,y=presence), color="darkcyan", fill="darkcyan",alpha=0.4)+
theme_minimal()+
labs(y="Probability of N-fixing plants")+
xlab("Distance [km]")+
theme(axis.text.y=element_text(size=30))+
theme(axis.text.x=element_text(size=30))+
theme(axis.title.y=element_text(size=30))+
theme(axis.title.x=element_text(size=30),margin = margin(t = 3))
oc_pres_native_dist_plot
oc_pres_native_dist_plot<-ggplot(pred.ml, aes(x = dist, y = fit))+
geom_line(color="darkcyan") +
geom_ribbon(aes(ymin=fit-se.fit, ymax=fit+se.fit), alpha=0.3,color="darkcyan", fill="darkcyan")+
geom_point(data = gdat.isl.ntv,aes(x=dist,y=presence), color="darkcyan", fill="darkcyan",alpha=0.4)+
theme_minimal()+
labs(y="Probability of N-fixing plants")+
xlab("Distance [km]")+
theme(axis.text.y=element_text(size=30))+
theme(axis.text.x=element_text(size=30))+
theme(axis.title.y=element_text(size=30))+
theme(axis.title.x=element_text(size=30,margin = margin(t = 10)))
oc_pres_native_dist_plot
#Saving the plot as a png
png("figures/M5_dist_oc_pres_ntvpoints.jpg", width=10, height= 10, units='in', res=300)
oc_pres_native_dist_plot
dev.off()
dev.off()
#plot the area distance interaction position=position_jitterdodge(dodge.width = 1)
areadist_oc_pres_ntz_plot<- ggplot(pdat, aes(x = dist, y = fit, fill=size, color=size))+
geom_line() +
geom_ribbon(aes(ymin=fit-se.fit, ymax=fit+se.fit), alpha=0.4)+
geom_point(data = gdat.isl.ntz,aes(x=dist,y=presence, color=areasize, fill=areasize),alpha=0.4,show.legend = FALSE)+
theme_minimal()+
labs(y="Probability of N-fixing plant species")+
xlab("Distance [km]")+
theme(axis.text.y=element_text(size=30))+
theme(axis.text.x=element_text(size=30))+
theme(axis.title.y=element_text(size=30))+
theme(axis.title.x=element_text(size=30,margin = margin(t = 10)))+
colo+
filo+
ylim(0,1)+
guides(
color = guide_legend(title = ""),  # Combine color legend
fill = guide_legend(title = "")  # Ensure fill uses the same legend title
) +
theme(legend.key.size = unit(1, 'cm'),      #change legend key size
legend.key.height = unit(1, 'cm'),    #change legend key height
legend.key.width = unit(1, 'cm'),     #change legend key width
legend.title = element_text(size=34), #change legend title font size
legend.text = element_text(size=30),  #change legend text font size
legend.position =  c(0.2, 0.85))       #change legend position
areadist_oc_pres_ntz_plot
#Saving the plot as a png
png("figures/M3_areadist_interactionpoints.jpg", width=10, height= 10, units='in', res=300)
areadist_oc_pres_ntz_plot
dev.off()
dev.off()
#plot the area distance interaction position=position_jitterdodge(dodge.width = 1)
areadist_oc_pres_ntz_plot<- ggplot(pdat, aes(x = dist, y = fit, fill=size, color=size))+
geom_line() +
geom_ribbon(aes(ymin=fit-se.fit, ymax=fit+se.fit), alpha=0.4)+
#geom_point(data = gdat.isl.ntz,aes(x=dist,y=presence, color=areasize, fill=areasize),alpha=0.4,show.legend = FALSE)+
theme_minimal()+
labs(y="Probability of N-fixing plant species")+
xlab("Distance [km]")+
theme(axis.text.y=element_text(size=30))+
theme(axis.text.x=element_text(size=30))+
theme(axis.title.y=element_text(size=30))+
theme(axis.title.x=element_text(size=30,margin = margin(t = 10)))+
colo+
filo+
ylim(0,1)+
guides(
color = guide_legend(title = ""),  # Combine color legend
fill = guide_legend(title = "")  # Ensure fill uses the same legend title
) +
theme(legend.key.size = unit(1, 'cm'),      #change legend key size
legend.key.height = unit(1, 'cm'),    #change legend key height
legend.key.width = unit(1, 'cm'),     #change legend key width
legend.title = element_text(size=34), #change legend title font size
legend.text = element_text(size=30),  #change legend text font size
legend.position =  c(0.2, 0.85))       #change legend position
areadist_oc_pres_ntz_plot
#Saving the plot as a png
png("figures/M3_areadist_interaction.jpg", width=10, height= 10, units='in', res=300)
areadist_oc_pres_ntz_plot
dev.off()
dev.off()
#plot the area distance interaction position=position_jitterdodge(dodge.width = 1)
areadist_oc_pres_ntz_plot<- ggplot(pdat, aes(x = dist, y = fit, fill=size, color=size))+
geom_line() +
geom_ribbon(aes(ymin=fit-se.fit, ymax=fit+se.fit), alpha=0.4)+
#geom_point(data = gdat.isl.ntz,aes(x=dist,y=presence, color=areasize, fill=areasize),alpha=0.4,show.legend = FALSE)+
theme_minimal()+
labs(y="Probability of N-fixing plant species")+
xlab("Distance [km]")+
theme(axis.text.y=element_text(size=30))+
theme(axis.text.x=element_text(size=30))+
theme(axis.title.y=element_text(size=30))+
theme(axis.title.x=element_text(size=30,margin = margin(t = 10)))+
colScale+
fillScale+
ylim(0,1)+
guides(
color = guide_legend(title = ""),  # Combine color legend
fill = guide_legend(title = "")  # Ensure fill uses the same legend title
) +
theme(legend.key.size = unit(1, 'cm'),      #change legend key size
legend.key.height = unit(1, 'cm'),    #change legend key height
legend.key.width = unit(1, 'cm'),     #change legend key width
legend.title = element_text(size=34), #change legend title font size
legend.text = element_text(size=30),  #change legend text font size
legend.position =  c(0.2, 0.85))       #change legend position
areadist_oc_pres_ntz_plot
# Load the necessary libraries
library(dplyr);library(segmented);library(nlme);library(mgcv);library(gridExtra);library(betareg);
library(MASS);library(lme4);library(lmerTest);library(lsmeans);library(ggeffects);library(spdep);
library(ggplot2);library(effects);library(ncf);library(ape);library(sjPlot);library(MuMIn);
library(tidyverse);library(car); library(V8); library(DHARMa); library(broom);library(grateful)
source("extra_functions.R")    #load script with additional functions
options(na.action = "na.fail") #Change na. action
#Load dataset from data cleaning script
gdat.ref <- readRDS("data/fulldata_for_analysis_2024.rds") %>%
dplyr::select(c("entity_ID","entity_class","nfix","nfixno", "latitude","abs.lat","longitude",                          # Select columns
"landtype","status","presence","area","elev_range","precipitation","dist", "temperature","urbanland"))
#Load dataset and subset to only native species and oceanic islands
gdat.isl.ntv <- gdat.ref %>%
dplyr::select(c("entity_ID","entity_class","nfix","nfixno", "latitude","abs.lat","longitude",                 # Select columns
"landtype","status","presence","area","dist","elev_range","precipitation", "temperature"))%>%
filter(status=="native")%>%                                                                                   #filter data to only include naturalized species
filter(landtype=="oceanic")%>%                                                                                #filter data to only include oceanic islands
mutate(area = as.vector(log10((area)+.01)))%>%                                                                #log10 transformation of area for models only
drop_na()%>%                                                                                                  #take out NAs
mutate_at(c("abs.lat","area","dist","elev_range","precipitation", "temperature"), scale)                      #scale all explanatory variables
#subset data for proportion analysis
oceanic.prop.ntv <- gdat.isl.ntv%>%
#remove outliers
filter(!entity_ID == 675) %>%
filter(!entity_ID == 921) %>%
filter(!entity_ID == 11474)%>%
mutate(species = nfix + nfixno)%>% #find out values that have no species counts
filter(species > 0)%>%             #filter out values that have no species counts
filter(precipitation<4)
gdat.isl.ntv <- gdat.ref %>%
dplyr::select(c("entity_ID","entity_class","nfix","nfixno", "latitude","abs.lat","longitude",                 # Select columns
"landtype","status","presence","area","dist","elev_range","precipitation", "temperature"))%>%
filter(status=="native")%>%                                                                                   #filter data to only include naturalized species
filter(landtype=="oceanic")%>%                                                                                #filter data to only include oceanic islands
mutate(area = as.vector(log10((area)+.01)))%>%                                                                #log10 transformation of area for models only
drop_na()
oceanic.prop.ntv <- gdat.isl.ntv%>%
#remove outliers
filter(!entity_ID == 675) %>%
filter(!entity_ID == 921) %>%
filter(!entity_ID == 11474)%>%
mutate(species = nfix + nfixno)%>% #find out values that have no species counts
filter(species > 0)
#selected variables
model.oc.prop<- glm(cbind(nfix,nfixno)~abs.lat+area +dist+precipitation +temperature+ area:dist, data=oceanic.prop.ntv, family=binomial(link ="logit"))
summary(model.oc.prop)
#model including spatial correlation variable (rac)
rac <- Spat.cor.rep(model.oc.prop,oceanic.prop.ntv,2000)
model.oc.prop.rac <- glm(cbind(nfix,nfixno)~abs.lat+area +dist+precipitation+temperature + area:dist+rac, data = oceanic.prop.ntv, family = binomial(link ="logit"))
summary(model.oc.prop.rac)
#area plot
new.dat.oc <- with(oceanic.prop.ntv, expand.grid(area = seq(min(area), max(area), length = 10))) %>%
mutate(rac = mean(rac), abs.lat= mean(oceanic.prop.ntv$abs.lat), dist=mean(oceanic.prop.ntv$dist), temperature= mean(oceanic.prop.ntv$temperature), precipitation=mean(oceanic.prop.ntv$precipitation))
pred.ml <- predict(model.oc.prop.rac, newdata = new.dat.oc, type = "response", se = TRUE) %>%
as.data.frame() %>%
mutate(dist = new.dat.oc$dist, landtype = "oceanic")
pred.ml <- predict(model.oc.prop.rac, newdata = new.dat.oc, type = "response", se = TRUE) %>%
as.data.frame() %>%
mutate(area = new.dat.oc$area, landtype = "oceanic")
oc_prop_native_dist_plot<-ggplot(pred.ml, aes(x = area, y = fit))+
geom_line(color="darkcyan") +
geom_ribbon(aes(ymin=fit-se.fit, ymax=fit+se.fit), alpha=0.3,color="darkcyan", fill="darkcyan")+
#geom_point(data = gdat.isl.ntv,aes(x=dist,y=prop), color="darkcyan", fill="darkcyan",alpha=0.4)+
theme_minimal()+
labs(y="Proportion of N-fixing plants")+
xlab("area [km2]")+
theme(axis.text.y=element_text(size=30))+
theme(axis.text.x=element_text(size=30))+
theme(axis.title.y=element_text(size=30))+
theme(axis.title.x=element_text(size=30,margin = margin(t = 10)))
oc_prop_native_dist_plot
#area plot
new.dat.oc <- with(oceanic.prop.ntv, expand.grid(area = seq(min(area), max(area), length = 1000))) %>%
mutate(rac = mean(rac), abs.lat= mean(oceanic.prop.ntv$abs.lat), dist=mean(oceanic.prop.ntv$dist), temperature= mean(oceanic.prop.ntv$temperature), precipitation=mean(oceanic.prop.ntv$precipitation))
pred.ml <- predict(model.oc.prop.rac, newdata = new.dat.oc, type = "response", se = TRUE) %>%
as.data.frame() %>%
mutate(area = new.dat.oc$area, landtype = "oceanic")
oc_prop_native_dist_plot<-ggplot(pred.ml, aes(x = area, y = fit))+
geom_line(color="darkcyan") +
geom_ribbon(aes(ymin=fit-se.fit, ymax=fit+se.fit), alpha=0.3,color="darkcyan", fill="darkcyan")+
#geom_point(data = gdat.isl.ntv,aes(x=dist,y=prop), color="darkcyan", fill="darkcyan",alpha=0.4)+
theme_minimal()+
labs(y="Proportion of N-fixing plants")+
xlab("area [km2]")+
theme(axis.text.y=element_text(size=30))+
theme(axis.text.x=element_text(size=30))+
theme(axis.title.y=element_text(size=30))+
theme(axis.title.x=element_text(size=30,margin = margin(t = 10)))
oc_prop_native_dist_plot
max(pred.ml$area)
#Load dataset and subset to only native species and oceanic islands
gdat.isl.ntv <- gdat.ref %>%
dplyr::select(c("entity_ID","entity_class","nfix","nfixno", "latitude","abs.lat","longitude",                 # Select columns
"landtype","status","presence","area","dist","elev_range","precipitation", "temperature"))%>%
filter(status=="native")%>%                                                                                   #filter data to only include naturalized species
filter(landtype=="oceanic")%>%                                                                                #filter data to only include oceanic islands
#mutate(area = as.vector(log10((area)+.01)))%>%                                                                #log10 transformation of area for models only
drop_na()
oceanic.prop.ntv <- gdat.isl.ntv%>%
#remove outliers
filter(!entity_ID == 675) %>%
filter(!entity_ID == 921) %>%
filter(!entity_ID == 11474)%>%
mutate(species = nfix + nfixno)%>% #find out values that have no species counts
filter(species > 0)
model.oc.prop<- glm(cbind(nfix,nfixno)~abs.lat+area +dist+precipitation +temperature+ area:dist, data=oceanic.prop.ntv, family=binomial(link ="logit"))
summary(model.oc.prop)
#model including spatial correlation variable (rac)
rac <- Spat.cor.rep(model.oc.prop,oceanic.prop.ntv,2000)
model.oc.prop.rac <- glm(cbind(nfix,nfixno)~abs.lat+area +dist+precipitation+temperature + area:dist+rac, data = oceanic.prop.ntv, family = binomial(link ="logit"))
summary(model.oc.prop.rac)
#area plot
new.dat.oc <- with(oceanic.prop.ntv, expand.grid(area = seq(min(area), max(area), length = 1000))) %>%
mutate(rac = mean(rac), abs.lat= mean(oceanic.prop.ntv$abs.lat), dist=mean(oceanic.prop.ntv$dist), temperature= mean(oceanic.prop.ntv$temperature), precipitation=mean(oceanic.prop.ntv$precipitation))
pred.ml <- predict(model.oc.prop.rac, newdata = new.dat.oc, type = "response", se = TRUE) %>%
as.data.frame() %>%
mutate(area = new.dat.oc$area, landtype = "oceanic")
oc_prop_native_dist_plot<-ggplot(pred.ml, aes(x = area, y = fit))+
geom_line(color="darkcyan") +
geom_ribbon(aes(ymin=fit-se.fit, ymax=fit+se.fit), alpha=0.3,color="darkcyan", fill="darkcyan")+
#geom_point(data = gdat.isl.ntv,aes(x=dist,y=prop), color="darkcyan", fill="darkcyan",alpha=0.4)+
theme_minimal()+
labs(y="Proportion of N-fixing plants")+
xlab("area [km2]")+
theme(axis.text.y=element_text(size=30))+
theme(axis.text.x=element_text(size=30))+
theme(axis.title.y=element_text(size=30))+
theme(axis.title.x=element_text(size=30,margin = margin(t = 10)))
oc_prop_native_dist_plot
oc_prop_native_area_plot
#Saving the plot as a png
png("figures/M6_area_prop_ntv.jpg", width=10, height= 10, units='in', res=300)
oc_prop_native_area_plot<-ggplot(pred.ml, aes(x = area, y = fit))+
geom_line(color="darkcyan") +
geom_ribbon(aes(ymin=fit-se.fit, ymax=fit+se.fit), alpha=0.3,color="darkcyan", fill="darkcyan")+
#geom_point(data = gdat.isl.ntv,aes(x=dist,y=prop), color="darkcyan", fill="darkcyan",alpha=0.4)+
theme_minimal()+
labs(y="Proportion of N-fixing plants")+
xlab("area [km2]")+
theme(axis.text.y=element_text(size=30))+
theme(axis.text.x=element_text(size=30))+
theme(axis.title.y=element_text(size=30))+
theme(axis.title.x=element_text(size=30,margin = margin(t = 10)))
oc_prop_native_area_plot
#Saving the plot as a png
png("figures/M6_area_prop_ntv.jpg", width=10, height= 10, units='in', res=300)
oc_prop_native_area_plot
dev.off()
dev.off()
#Saving the plot as a png
png("figures/M6_area_prop_ntv_nologtransform.jpg", width=10, height= 10, units='in', res=300)
oc_prop_native_area_plot
dev.off()
gdat.isl.ntv <- gdat.ref %>%
dplyr::select(c("entity_ID","entity_class","nfix","nfixno", "latitude","abs.lat","longitude",                 # Select columns
"landtype","status","presence","area","dist","elev_range","precipitation", "temperature"))%>%
filter(status=="native")%>%                                                                                   #filter data to only include naturalized species
filter(landtype=="oceanic")%>%                                                                                #filter data to only include oceanic islands
mutate(area = as.vector(log10((area)+.01)))%>%                                                                #log10 transformation of area for models only
drop_na()
#subset data for proportion analysis
oceanic.prop.ntv <- gdat.isl.ntv%>%
#remove outliers
filter(!entity_ID == 675) %>%
filter(!entity_ID == 921) %>%
filter(!entity_ID == 11474)%>%
mutate(species = nfix + nfixno)%>% #find out values that have no species counts
filter(species > 0)
#selected variables
model.oc.prop<- glm(cbind(nfix,nfixno)~abs.lat+area +dist+precipitation +temperature+ area:dist, data=oceanic.prop.ntv, family=binomial(link ="logit"))
summary(model.oc.prop)
#model including spatial correlation variable (rac)
rac <- Spat.cor.rep(model.oc.prop,oceanic.prop.ntv,2000)
model.oc.prop.rac <- glm(cbind(nfix,nfixno)~abs.lat+area +dist+precipitation+temperature + area:dist+rac, data = oceanic.prop.ntv, family = binomial(link ="logit"))
summary(model.oc.prop.rac)
#area plot
new.dat.oc <- with(oceanic.prop.ntv, expand.grid(area = seq(min(area), max(area), length = 1000))) %>%
mutate(rac = mean(rac), abs.lat= mean(oceanic.prop.ntv$abs.lat), dist=mean(oceanic.prop.ntv$dist), temperature= mean(oceanic.prop.ntv$temperature), precipitation=mean(oceanic.prop.ntv$precipitation))
pred.ml <- predict(model.oc.prop.rac, newdata = new.dat.oc, type = "response", se = TRUE) %>%
as.data.frame() %>%
mutate(area = new.dat.oc$area, landtype = "oceanic")
oc_prop_native_area_plot<-ggplot(pred.ml, aes(x = area, y = fit))+
geom_line(color="darkcyan") +
geom_ribbon(aes(ymin=fit-se.fit, ymax=fit+se.fit), alpha=0.3,color="darkcyan", fill="darkcyan")+
#geom_point(data = gdat.isl.ntv,aes(x=dist,y=prop), color="darkcyan", fill="darkcyan",alpha=0.4)+
theme_minimal()+
labs(y="Proportion of N-fixing plants")+
xlab("area [km2]")+
theme(axis.text.y=element_text(size=30))+
theme(axis.text.x=element_text(size=30))+
theme(axis.title.y=element_text(size=30))+
theme(axis.title.x=element_text(size=30,margin = margin(t = 10)))
oc_prop_native_area_plot
oc_prop_native_area_plot
dev.off()
oc_prop_native_area_plot<-ggplot(pred.ml, aes(x = area, y = fit))+
geom_line(color="darkcyan") +
geom_ribbon(aes(ymin=fit-se.fit, ymax=fit+se.fit), alpha=0.3,color="darkcyan", fill="darkcyan")+
#geom_point(data = gdat.isl.ntv,aes(x=dist,y=prop), color="darkcyan", fill="darkcyan",alpha=0.4)+
theme_minimal()+
labs(y="Proportion of N-fixing plants")+
xlab("area [km2]")+
theme(axis.text.y=element_text(size=30))+
theme(axis.text.x=element_text(size=30))+
theme(axis.title.y=element_text(size=30))+
theme(axis.title.x=element_text(size=30,margin = margin(t = 10)))
oc_prop_native_area_plot
oc_prop_native_area_plot<-ggplot(pred.ml, aes(x = area, y = fit))+
geom_line(color="darkcyan") +
geom_ribbon(aes(ymin=fit-se.fit, ymax=fit+se.fit), alpha=0.3,color="darkcyan", fill="darkcyan")+
#geom_point(data = gdat.isl.ntv,aes(x=dist,y=prop), color="darkcyan", fill="darkcyan",alpha=0.4)+
theme_minimal()+
labs(y="Proportion of N-fixing plants")+
xlab("area")+
theme(axis.text.y=element_text(size=30))+
theme(axis.text.x=element_text(size=30))+
theme(axis.title.y=element_text(size=30))+
theme(axis.title.x=element_text(size=30,margin = margin(t = 10)))
oc_prop_native_area_plot
#Saving the plot as a png
png("figures/M6_area_prop_ntv.jpg", width=10, height= 10, units='in', res=300)
oc_prop_native_area_plot
dev.off()
dev.off()
