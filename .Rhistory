"landtype","status","presence","area","elev_range","precipitation","dist", "temperature","urbanland"))
#dataset for broad presence model including mainlands
gdat.ml.pres <- gdat.ref %>%
dplyr::select(c("entity_ID","nfix","nfixno", "latitude","abs.lat","longitude", # Select columns
"landtype","status","presence","area","elev_range","precipitation","temperature"))%>%
filter(!landtype=="other_island")%>%                                          #remove islands with undetermined type
mutate(area = as.vector(log10((area)+.01)))%>%                                #log transform area
drop_na()%>%
mutate_at(c("abs.lat","area","elev_range","precipitation", "temperature"), scale) #scale all explanatory variables
ml<- gdat.ml.pres%>% filter(landtype==mainland)
ml<- gdat.ml.pres%>% filter(landtype== Mainland)
View(gdat.ml.pres)
ml<- gdat.ml.pres%>% filter(landtype== "mainland")
nocisl<- gdat.ml.pres%>% filter(landtype== "nonoceanic")
ocisl<- gdat.ml.pres%>% filter(landtype== "oceanic")
ml<- gdat.ml.pres%>% filter(status=="native"%>%filter(landtype== "mainland")
ml<- gdat.ml.pres%>% filter(status=="native")%>%filter(landtype== "mainland")
ml<- gdat.ml.pres%>% filter(status=="native")%>%filter(landtype== "mainland")
ml<- gdat.ml.pres%>% filter(status=="naturalized")%>%filter(landtype== "mainland")
nocisl<- gdat.ml.pres%>%filter(status=="naturalized") %>%filter(landtype== "nonoceanic")
ocisl<- gdat.ml.pres%>%filter(status=="naturalized") %>%filter(landtype== "oceanic")
#dataset for M2 broad proportion model including mainlands
gdat.ml.prop <- gdat.ref %>%
dplyr::select(c("entity_ID","nfix","nfixno", "latitude","abs.lat","longitude", # Select columns
"landtype","status","presence","area","elev_range","precipitation", "temperature"))%>%
filter(!landtype=="other_island")%>%                                          #remove islands with undetermined type
mutate(area = as.vector(log10((area)+.01)))%>%                                #log transform area
mutate(species = nfix + nfixno) %>%   #find out rows that have no species counts
filter(species > 0) %>%
drop_na() %>%
mutate_at(c("abs.lat","area","elev_range","precipitation","temperature"), scale) %>%  #scale all explanatory variables
filter(precipitation < 3.5)   #remove outliers
ml<- gdat.ml.prop%>% filter(status=="naturalized")%>%filter(landtype== "mainland")
nocisl<- gdat.ml.prop%>%filter(status=="naturalized") %>%filter(landtype== "nonoceanic")
ocisl<- gdat.ml.prop%>%filter(status=="naturalized") %>%filter(landtype== "oceanic")
ml<- gdat.ml.prop%>% filter(status=="native")%>%filter(landtype== "mainland")
nocisl<- gdat.ml.prop%>%filter(status=="native") %>%filter(landtype== "nonoceanic")
ocisl<- gdat.ml.prop%>%filter(status=="native") %>%filter(landtype== "oceanic")
ml<- gdat.ml.prop%>% filter(status=="naturalized")%>%filter(landtype== "mainland")
nocisl<- gdat.ml.prop%>%filter(status=="naturalized") %>%filter(landtype== "nonoceanic")
ocisl<- gdat.ml.prop%>%filter(status=="naturalized") %>%filter(landtype== "oceanic")
#Load dataset and subset to only naturalized species and oceanic islands
gdat.isl.ntz <- gdat.ref %>%
dplyr::select(c("entity_ID","entity_class","nfix","nfixno", "latitude","abs.lat","longitude", # Select columns
"landtype","status","presence","area","dist","elev_range","precipitation", "temperature","urbanland"))%>%
filter(status=="naturalized")%>%
mutate(area = as.vector(log10((area)+.01)))%>%  #log10 transformation of area for models only; remove for figures
filter(landtype=="oceanic")%>%
drop_na()%>%
mutate_at(c("abs.lat","area","dist","elev_range","precipitation", "temperature","urbanland"), scale)#%>%  #scale all explanatory variables
#check correlations
dat <- gdat.isl.ntz
#load data and filter out all locations without species counts
oceanic.prop<-gdat.isl.ntz%>%
mutate(species = nfix + nfixno)%>%
filter(species >0)%>%
filter(precipitation< 4) #take out outlier (only do this in scaled version for modelling remove when creating figures)
#Load dataset and subset to only native species and oceanic islands
gdat.isl.ntv <- gdat.ref %>%
dplyr::select(c("entity_ID","entity_class","nfix","nfixno", "latitude","abs.lat","longitude", # Select columns
"landtype","status","presence","area","dist","elev_range","precipitation", "temperature"))%>%
filter(status=="native")%>%
#filter(area>6)%>%
add_row(entity_ID = 0000, entity_class="Island", area=6)%>% # breakpoint
mutate(area = as.vector(log10((area)+.01)))%>%  #log10 transformation of area for models only; remove for figs
filter(landtype=="oceanic")%>%
drop_na()%>%
mutate_at(c("abs.lat","area","dist","elev_range","precipitation", "temperature"), scale)  #scale all explanatory variables
#create data subset for presence analysis
oceanic.pres.ntv <- gdat.isl.ntv%>%
filter(!entity_ID == "594")# one data point removed due to extreme residual outlier status (see below)
#subset data for proportion analysis
oceanic.prop.ntv <- gdat.isl.ntv%>%
#remove outliers
filter(!entity_ID == 675) %>%
filter(!entity_ID == 921) %>%
filter(!entity_ID == 11474)%>%
mutate(species = nfix + nfixno)%>% #find out values that have no species counts
filter(species > 0)%>%
filter(precipitation<4)
# Load the necessary libraries
library(dplyr);library(segmented);library(nlme);library(mgcv);library(gridExtra);library(betareg);
library(MASS);library(lme4);library(lmerTest);library(lsmeans);library(ggeffects);library(spdep);
library(ggplot2);library(effects);library(ncf);library(ape);library(sjPlot);library(gridExtra);
library(MuMIn);library(tidyverse);library(car); library(V8); library(rsq); library(DHARMa); library(grateful);library(broom)
source("extra_functions.R")
options(na.action = "na.fail") #Change na. action
#Load dataset from data cleaning script
gdat.ref <- readRDS("data/fulldata_for_analysis_2024.rds") %>%
dplyr::select(c("entity_ID","entity_class","nfix","nfixno", "latitude","abs.lat","longitude", # Select columns
"landtype","status","presence","area","elev_range","precipitation","dist", "temperature","urbanland"))
#### M1 Broad Presence (across islands and mainlands including native and naturalized floras)
broad.pres.model.full<- glm(presence~landtype*status+abs.lat+area+elev_range+precipitation+temperature, data =gdat.ml.pres, family= binomial(link ="logit"))
broad.pres.model.rac.full <- glm(presence~landtype*status+abs.lat+area+elev_range+precipitation+temperature+rac, data = gdat.ml.pres, family = binomial(link ="logit")) #has to be exactly the same as the model but with +rac
summary(broad.pres.model.rac.full)
#M1 with only selected variables after stepwise regression
broad.pres.model<- glm(presence~landtype*status+area+elev_range+precipitation+temperature, data =gdat.ml.pres, family= binomial(link ="logit"))
summary(broad.pres.model)
ref.land.stat <- lsmeans(broad.pres.model,pairwise~landtype*status, data= gdat.ml.pres, type="response")
ref.table.land.stat <- as.data.frame(ref.land.stat$lsmeans)
#model including spatial correlation variable
rac <- Spat.cor.rep(broad.pres.model,gdat.ml.pres,2000)
broad.pres.model.rac <- glm(presence~landtype*status+area+elev_range+precipitation+temperature+rac, data = gdat.ml.pres, family = binomial(link ="logit")) #has to be exactly the same as the model but with +rac
summary(broad.pres.model.rac)
#add rac variable to dataframe to include in lsmeans
gdat.ml.pres$rac <- rac
ref.land.stat.rac<-lsmeans(broad.pres.model.rac,pairwise~landtype*status, data = gdat.ml.pres, type="response")
ref.table.land.stat.rac<-as.data.frame(ref.land.stat.rac$lsmeans)
#check variance inflation factor (should be below 5 for all variables)
vif(broad.pres.model.rac)
#check model assumptions
simulationOutput <- simulateResiduals(fittedModel = broad.pres.model.rac, plot = F)
#contrasts
means <- emmeans(broad.pres.model.rac, ~landtype*status)
#look at means order to determine how to write contrasts:
means
#write contrasts:
contrasts <- list("mainland v all islands native" = c(-2,1,1,0,0,0),
"mainland v nonoceanic islands native" = c(-1,1,0,0,0,0),
"mainland v oceanic islands native" = c(-1,0,1,0,0,0),
"nonoceanic v oceanic islands native" = c(0,-1,1,0,0,0),
"mainland v all islands naturalized" = c(0,0,0,-2,1,1),
"mainland v oceanic islands naturalized" = c(0,0,0,-1,0,1),
"mainland v nonoceanic islands naturalized" = c(0,0,0,-1,1,0),
"nonoceanic v oceanic islands naturalized" = c(0,0,0,0,-1,1),
# is first contrast different native v non-native?
"mainland v all islands * status" = c(-2,1,1,2,-1,-1),
"mainland v oceanic islands * status" = c(-1,0,1,1,0,-1),
"mainland v nonoceanic islands * status" =  c(-1,1,0,1,-1,0),
"nonoceanic v oceanic island * status" = c(0,-1,1,0,1,-1),
"native v naturalized only on mainlands" =  c(-1,0,0,1,0,0),
"native v naturalized only on oceanic islands" =  c(0,0,-1,0,0,1),
"native v naturalized only on nonoceanic islands" =  c(0,-1,0,0,1,0),
"native v naturalized on both island types" =  c(0,-1,-1,0,1,1)
)
#extract results to df:
results <- lsmeans::contrast(means,contrasts)
results.df <- as.data.frame(results)
results.df
#Naturalized Plot
#subset data to only include naturalized for plot
gdat.ml.ntz<- gdat.ml.pres%>%filter(status=="naturalized")
ref.table.land.stat.rac.ntz <- ref.table.land.stat.rac%>%filter(!status=="native") #subset lsmeans to only include naturalized for plot
#Create a custom color scale
colScale <- scale_colour_manual(values=c("coral"))
fillScale <- scale_fill_manual(values=c("coral"))
#plot the model results for M1 presence of naturalized flora across islands and mainlands
broad.pres.ntz<-
ggplot(ref.table.land.stat.rac.ntz, aes(x = landtype, y = lsmean, fill = status, color = status))  +
geom_point(position=position_dodge(1), size = 2) +
geom_errorbar(aes(ymin=lsmean-SE, ymax=lsmean+SE), width=0.4,size=1, position=position_dodge(1)) +
theme(legend.justification=c(1,1), legend.position=c(1,1))+
geom_bar(stat="identity",position=position_dodge(1), alpha=0.3)+
geom_point(data = gdat.ml.ntz,aes(x=landtype,y=presence,color=status),position=position_jitterdodge(dodge.width = 1),size=2,alpha=0.3)+
coord_cartesian(ylim=c(0,1))+
colScale+
fillScale+
labs(y="Probability of N-fixing Plants")+
xlab(" ")+
theme_classic(base_size = 30) +
theme(legend.justification=c(1,1), legend.position=c(1,1))+
theme(legend.position = "top")+
theme(legend.key = element_rect(colour =c("coral") ))+
theme(legend.background = element_blank(),legend.box.background = element_rect(colour = "black"))+
guides(color="none", fill = guide_legend(title="Floral status:",override.aes = list(shape = NA)))+
theme(axis.text.y=element_text(size=50))+
theme(axis.text.x=element_text(size=50))+
ylim(0,1)
broad.pres.ntz
#Naturalized Plot
#subset data to only include naturalized for plot
gdat.ml.ntz<- gdat.ml.pres%>%filter(status=="naturalized")
ref.table.land.stat.rac.ntz <- ref.table.land.stat.rac%>%filter(!status=="native") #subset lsmeans to only include naturalized for plot
#Create a custom color scale
colScale <- scale_colour_manual(values=c("coral"))
fillScale <- scale_fill_manual(values=c("coral"))
#plot the model results for M1 presence of naturalized flora across islands and mainlands
broad.pres.ntz<-
ggplot(ref.table.land.stat.rac.ntz, aes(x = landtype, y = lsmean, fill = status, color = status))  +
geom_point(position=position_dodge(1), size = 2) +
geom_errorbar(aes(ymin=lsmean-SE, ymax=lsmean+SE), width=0.4,size=1, position=position_dodge(1)) +
theme(legend.justification=c(1,1), legend.position=c(1,1))+
geom_bar(stat="identity",position=position_dodge(1), alpha=0.3)+
geom_point(data = gdat.ml.ntz,aes(x=landtype,y=presence,color=status),position=position_jitterdodge(dodge.width = 1),size=2,alpha=0.3)+
coord_cartesian(ylim=c(0,1))+
colScale+
fillScale+
labs(y="Probability of N-fixing Plants")+
xlab(" ")+
theme_classic(base_size = 30) +
theme(legend.justification=c(1,1), legend.position=c(1,1))+
theme(legend.position = "top")+
theme(legend.key = element_rect(colour =c("coral") ))+
theme(legend.background = element_blank(),legend.box.background = element_rect(colour = "black"))+
guides(color="none", fill = guide_legend(title="Floral status:",override.aes = list(shape = NA)))+
theme(axis.text.y=element_text(size=50))+
theme(axis.text.x=element_text(size=50))+
ylim(0,1)
#Load dataset and subset to only naturalized species and oceanic islands
gdat.isl.ntz <- gdat.ref %>%
dplyr::select(c("entity_ID","entity_class","nfix","nfixno", "latitude","abs.lat","longitude", # Select columns
"landtype","status","presence","area","dist","elev_range","precipitation", "temperature","urbanland"))%>%
filter(status=="naturalized")%>%
mutate(area = as.vector(log10((area)+.01)))%>%  #log10 transformation of area for models only; remove for figures
filter(landtype=="oceanic")%>%
drop_na()%>%
mutate_at(c("abs.lat","area","dist","elev_range","precipitation", "temperature","urbanland"), scale)#%>%  #scale all explanatory variables
#check correlations
dat <- gdat.isl.ntz
names(gdat.isl.ntz)
cont.var <- c("abs.lat", "area","elev_range","precipitation","temperature","dist", "urbanland")
Mypairs(dat[,cont.var]) # area and elevation range 0.72, abs.lat and temperature 0.88
model.oc.pres.full<- glm(presence~abs.lat +elev_range	+precipitation+temperature	+area*dist +urbanland*dist, data=gdat.isl.ntz, family=binomial(link ="logit"))
summary(model.oc.pres.full)
#model including spatial correlation variable (rac)
rac <- Spat.cor.rep(model.oc.pres.full,gdat.isl.ntz,2000)
model.oc.pres.rac.full <- glm(presence~abs.lat +elev_range+precipitation+ temperature+area*dist +urbanland*dist+rac, data = gdat.isl.ntz, family = binomial(link ="logit")) #has to be exactly the same as the model but with +rac
summary(model.oc.pres.rac.full)
#model with selected variables after stepwise regression
model.oc.pres<- glm(presence~abs.lat+area+dist+area:dist, data=gdat.isl.ntz, family=binomial(link ="logit"))
summary(model.oc.pres)
#Correlogram to test distance of spatial autocorrelation
correlogram(model.oc.pres, gdat.isl.ntz, "figures/M3_ntzocpres_correlogram.jpg")
#model including spatial correlation variable (rac)
rac <- Spat.cor.rep(model.oc.pres,gdat.isl.ntz,2000)
model.oc.pres.rac<- glm(presence~ abs.lat+area+dist+area:dist+rac, data = gdat.isl.ntz, family = binomial(link ="logit")) #has to be exactly the same as the model but with +rac
summary(model.oc.pres.rac)
# convert the model output into a df
coef_dataM3 <- tidy(model.oc.pres.rac, conf.int = TRUE)
#check variance inflation factor
vif(model.oc.pres.rac)
library(glmtoolbox)#doesnt have a partial R2 function
adjR2(model.oc.pres.rac)
#Figure area:distance interaction
#create a color scale
colScale <- scale_colour_manual(values =c ("coral","coral2","coral3","sandybrown"))
fillScale <- scale_fill_manual(values =c ("coral","coral2","coral3","coral"))
model.oc.pres.rac$area
sd(gdat.isl.ntz$area)
area.minmax <- data.frame(area = c(mean(gdat.isl.ntz$area)-sd(gdat.isl.ntz$area),mean(gdat.isl.ntz$area),mean(gdat.isl.ntz$area)+sd(gdat.isl.ntz$area)), size =c ("small", "medium","large"))
dist.range <- with(gdat.isl.ntz, expand.grid(dist = seq(min(dist), max(dist), length = 1000)))
ex.grid <- expand.grid(area = area.minmax$area, dist = dist.range$dist)
pred.dat <- ex.grid %>% mutate(rac = mean(rac), abs.lat= mean(gdat.isl.ntz$abs.lat))
pred <- predict.glm(model.oc.pres.rac,type="response",newdata = pred.dat,se=TRUE)
pdat <- cbind(ex.grid,pred) %>%
left_join(area.minmax)
#plot the area distance interaction
areadist_oc_pres_ntz_plot<- ggplot(pdat, aes(x = dist, y = fit, fill=size, color=size))+
geom_line() +
geom_ribbon(aes(ymin=fit-se.fit, ymax=fit+se.fit), alpha=0.7)+
#geom_point(data=gdat.isl.ntz, mapping=aes(x=dist, y=presence),alpha=0.2, size=2)+
theme_minimal()+
labs(y="Probability of N-fixing plant species")+
xlab("Distance [km]")+
theme(axis.text.y=element_text(size=30))+
theme(axis.text.x=element_text(size=30))+
theme(axis.title.y=element_text(size=30))+
theme(axis.title.x=element_text(size=30))+
colScale+
fillScale+
ylim(0,1)+
theme(legend.key.size = unit(1, 'cm'), #change legend key size
legend.key.height = unit(1, 'cm'), #change legend key height
legend.key.width = unit(1, 'cm'), #change legend key width
legend.title = element_text(size=34), #change legend title font size
legend.text = element_text(size=30),#change legend text font size
legend.position = c(0.2, 0.85)) #change legend position
areadist_oc_pres_ntz_plot
# Load the necessary libraries
library(dplyr);library(segmented);library(nlme);library(mgcv);library(gridExtra);library(betareg);
library(MASS);library(lme4);library(lmerTest);library(lsmeans);library(ggeffects);library(spdep);
library(ggplot2);library(effects);library(ncf);library(ape);library(sjPlot);library(gridExtra);
library(MuMIn);library(tidyverse);library(car); library(V8); library(rsq); library(DHARMa); library(grateful);library(broom)
source("extra_functions.R")
options(na.action = "na.fail") #Change na. action
#Load dataset from data cleaning script
gdat.ref <- readRDS("data/fulldata_for_analysis_2024.rds") %>%
dplyr::select(c("entity_ID","entity_class","nfix","nfixno", "latitude","abs.lat","longitude", # Select columns
"landtype","status","presence","area","elev_range","precipitation","dist", "temperature","urbanland"))
#dataset for broad presence model including mainlands
gdat.ml.pres <- gdat.ref %>%
dplyr::select(c("entity_ID","nfix","nfixno", "latitude","abs.lat","longitude", # Select columns
"landtype","status","presence","area","elev_range","precipitation","temperature"))%>%
filter(!landtype=="other_island")%>%                                          #remove islands with undetermined type
mutate(area = as.vector(log10((area)+.01)))%>%                                #log transform area
drop_na()%>%
mutate_at(c("abs.lat","area","elev_range","precipitation", "temperature"), scale) #scale all explanatory variables
#check correlations
dat <- gdat.ml.pres
#M1 with only selected variables after stepwise regression
broad.pres.model<- glm(presence~landtype*status+area+elev_range+precipitation+temperature, data =gdat.ml.pres, family= binomial(link ="logit"))
summary(broad.pres.model)
ref.land.stat <- lsmeans(broad.pres.model,pairwise~landtype*status, data= gdat.ml.pres, type="response")
ref.table.land.stat <- as.data.frame(ref.land.stat$lsmeans)
#model including spatial correlation variable
rac <- Spat.cor.rep(broad.pres.model,gdat.ml.pres,2000)
broad.pres.model.rac <- glm(presence~landtype*status+area+elev_range+precipitation+temperature+rac, data = gdat.ml.pres, family = binomial(link ="logit")) #has to be exactly the same as the model but with +rac
summary(broad.pres.model.rac)
#add rac variable to dataframe to include in lsmeans
gdat.ml.pres$rac <- rac
ref.land.stat.rac<-lsmeans(broad.pres.model.rac,pairwise~landtype*status, data = gdat.ml.pres, type="response")
ref.table.land.stat.rac<-as.data.frame(ref.land.stat.rac$lsmeans)
#check variance inflation factor (should be below 5 for all variables)
vif(broad.pres.model.rac)
#check model assumptions
simulationOutput <- simulateResiduals(fittedModel = broad.pres.model.rac, plot = F)
#contrasts
means <- emmeans(broad.pres.model.rac, ~landtype*status)
#look at means order to determine how to write contrasts:
means
#write contrasts:
contrasts <- list("mainland v all islands native" = c(-2,1,1,0,0,0),
"mainland v nonoceanic islands native" = c(-1,1,0,0,0,0),
"mainland v oceanic islands native" = c(-1,0,1,0,0,0),
"nonoceanic v oceanic islands native" = c(0,-1,1,0,0,0),
"mainland v all islands naturalized" = c(0,0,0,-2,1,1),
"mainland v oceanic islands naturalized" = c(0,0,0,-1,0,1),
"mainland v nonoceanic islands naturalized" = c(0,0,0,-1,1,0),
"nonoceanic v oceanic islands naturalized" = c(0,0,0,0,-1,1),
# is first contrast different native v non-native?
"mainland v all islands * status" = c(-2,1,1,2,-1,-1),
"mainland v oceanic islands * status" = c(-1,0,1,1,0,-1),
"mainland v nonoceanic islands * status" =  c(-1,1,0,1,-1,0),
"nonoceanic v oceanic island * status" = c(0,-1,1,0,1,-1),
"native v naturalized only on mainlands" =  c(-1,0,0,1,0,0),
"native v naturalized only on oceanic islands" =  c(0,0,-1,0,0,1),
"native v naturalized only on nonoceanic islands" =  c(0,-1,0,0,1,0),
"native v naturalized on both island types" =  c(0,-1,-1,0,1,1)
)
#extract results to df:
results <- lsmeans::contrast(means,contrasts)
results.df <- as.data.frame(results)
results.df
ref.table.land.stat.rac.ntz <- ref.table.land.stat.rac%>%filter(!status=="native") #subset lsmeans to only include naturalized for plot
#Naturalized Plot
#subset data to only include naturalized for plot
gdat.ml.ntz<- gdat.ml.pres%>%filter(status=="naturalized")
#Create a custom color scale
colScale <- scale_colour_manual(values=c("coral"))
fillScale <- scale_fill_manual(values=c("coral"))
#plot the model results for M1 presence of naturalized flora across islands and mainlands
broad.pres.ntz<-
ggplot(ref.table.land.stat.rac.ntz, aes(x = landtype, y = lsmean, fill = status, color = status))  +
geom_point(position=position_dodge(1), size = 2) +
geom_errorbar(aes(ymin=lsmean-SE, ymax=lsmean+SE), width=0.4,size=1, position=position_dodge(1)) +
theme(legend.justification=c(1,1), legend.position=c(1,1))+
geom_bar(stat="identity",position=position_dodge(1), alpha=0.3)+
geom_point(data = gdat.ml.ntz,aes(x=landtype,y=presence,color=status),position=position_jitterdodge(dodge.width = 1),size=2,alpha=0.3)+
coord_cartesian(ylim=c(0,1))+
colScale+
fillScale+
labs(y="Probability of N-fixing Plants")+
xlab(" ")+
theme_classic(base_size = 30) +
theme(legend.justification=c(1,1), legend.position=c(1,1))+
theme(legend.position = "top")+
theme(legend.key = element_rect(colour =c("coral") ))+
theme(legend.background = element_blank(),legend.box.background = element_rect(colour = "black"))+
guides(color="none", fill = guide_legend(title="Floral status:",override.aes = list(shape = NA)))+
theme(axis.text.y=element_text(size=50))+
theme(axis.text.x=element_text(size=50))+
ylim(0,1)
broad.pres.ntz
head(gdat.ref)
# Load the necessary libraries
library(dplyr);library(segmented);library(nlme);library(mgcv);library(gridExtra);library(betareg);
library(MASS);library(lme4);library(lmerTest);library(lsmeans);library(ggeffects);library(spdep);
library(ggplot2);library(effects);library(ncf);library(ape);library(sjPlot);library(gridExtra);
library(MuMIn);library(tidyverse);library(car); library(V8); library(rsq); library(DHARMa); library(grateful);library(broom)
source("extra_functions.R")
options(na.action = "na.fail") #Change na. action
#Load dataset from data cleaning script
gdat.ref <- readRDS("data/fulldata_for_analysis_2024.rds") %>%
dplyr::select(c("entity_ID","entity_class","nfix","nfixno", "latitude","abs.lat","longitude", # Select columns
"landtype","status","presence","area","elev_range","precipitation","dist", "temperature","urbanland"))
#Load dataset from data cleaning script
gdat.ref <- readRDS("data/fulldata_for_analysis_2024.rds") %>%
dplyr::select(c("entity_ID","entity_class","nfix","nfixno", "latitude","abs.lat","longitude", # Select columns
"landtype","status","presence","area","elev_range","precipitation","dist", "temperature","urbanland"))
#Load dataset and subset to only native species and oceanic islands
gdat.isl.ntv <- gdat.ref %>%
dplyr::select(c("entity_ID","entity_class","nfix","nfixno", "latitude","abs.lat","longitude", # Select columns
"landtype","status","presence","area","dist","elev_range","precipitation", "temperature"))%>%
filter(status=="native")%>%
#filter(area>6)%>%
add_row(entity_ID = 0000, entity_class="Island", area=6)%>% # breakpoint
mutate(area = as.vector(log10((area)+.01)))%>%  #log10 transformation of area for models only; remove for figs
filter(landtype=="oceanic")%>%
drop_na()%>%
mutate_at(c("abs.lat","area","dist","elev_range","precipitation", "temperature"), scale)  #scale all explanatory variables
#subset data for proportion analysis
oceanic.prop.ntv <- gdat.isl.ntv%>%
#remove outliers
filter(!entity_ID == 675) %>%
filter(!entity_ID == 921) %>%
filter(!entity_ID == 11474)%>%
mutate(species = nfix + nfixno)%>% #find out values that have no species counts
filter(species > 0)%>%
filter(precipitation<4)
#selected variables
model.oc.prop<- glm(cbind(nfix,nfixno)~abs.lat+area +dist+precipitation +temperature+ area:dist, data=oceanic.prop.ntv, family=binomial(link ="logit"))
summary(model.oc.prop)
#model including spatial correlation variable (rac)
rac <- Spat.cor.rep(model.oc.prop,oceanic.prop.ntv,2000)
model.oc.prop.rac <- glm(cbind(nfix,nfixno)~abs.lat +area +dist+precipitation+temperature + area:dist+rac, data = oceanic.prop.ntv, family = binomial(link ="logit")) #has to be exactly the same as the model but with +rac
summary(model.oc.prop.rac)
#residuals
plotResiduals(simulationOutput)
colScale <- scale_colour_manual(values =c ("darkseagreen1","darkseagreen3","darkseagreen4","darkseagreen"))
fillScale <- scale_fill_manual(values =c ("darkseagreen1","darkseagreen3","darkseagreen4","darkseagreen"))
model.oc.prop.rac$area
sd(oceanic.prop.ntv$area)
area.minmax <- data.frame(area = c(mean(oceanic.prop.ntv$area)-sd(oceanic.prop.ntv$area),mean(oceanic.prop.ntv$area),mean(oceanic.prop.ntv$area)+sd(oceanic.prop.ntv$area)), size =c ("small", "medium","large"))
dist.range <- with(oceanic.prop.ntv, expand.grid(dist = seq(min(dist), max(dist), length = 1000)))
ex.grid <- expand.grid(area = area.minmax$area, dist = dist.range$dist)
pred.dat <- ex.grid %>% mutate(rac = mean(rac), abs.lat= mean(oceanic.prop.ntv$abs.lat), precipitation=mean(oceanic.prop.ntv$precipitation), temperature=mean(oceanic.prop.ntv$temperature))
pred <- predict.glm(model.oc.prop.rac,type="response",newdata = pred.dat,se=TRUE)
#Load dataset and subset to only native species and oceanic islands
gdat.isl.ntv <- gdat.ref %>%
dplyr::select(c("entity_ID","entity_class","nfix","nfixno", "latitude","abs.lat","longitude", # Select columns
"landtype","status","presence","area","dist","elev_range","precipitation", "temperature"))%>%
filter(status=="native")%>%
#filter(area>6)%>%
add_row(entity_ID = 0000, entity_class="Island", area=6)%>% # breakpoint
mutate(area = as.vector(log10((area)+.01)))%>%  #log10 transformation of area for models only; remove for figs
filter(landtype=="oceanic")%>%
drop_na()
#subset data for proportion analysis
oceanic.prop.ntv <- gdat.isl.ntv%>%
#remove outliers
filter(!entity_ID == 675) %>%
filter(!entity_ID == 921) %>%
filter(!entity_ID == 11474)%>%
mutate(species = nfix + nfixno)%>% #find out values that have no species counts
filter(species > 0)
#selected variables
model.oc.prop<- glm(cbind(nfix,nfixno)~abs.lat+area +dist+precipitation +temperature+ area:dist, data=oceanic.prop.ntv, family=binomial(link ="logit"))
summary(model.oc.prop)
#model including spatial correlation variable (rac)
rac <- Spat.cor.rep(model.oc.prop,oceanic.prop.ntv,2000)
model.oc.prop.rac <- glm(cbind(nfix,nfixno)~abs.lat +area +dist+precipitation+temperature + area:dist+rac, data = oceanic.prop.ntv, family = binomial(link ="logit")) #has to be exactly the same as the model but with +rac
summary(model.oc.prop.rac)
colScale <- scale_colour_manual(values =c ("darkseagreen1","darkseagreen3","darkseagreen4","darkseagreen"))
fillScale <- scale_fill_manual(values =c ("darkseagreen1","darkseagreen3","darkseagreen4","darkseagreen"))
model.oc.prop.rac$area
sd(oceanic.prop.ntv$area)
area.minmax <- data.frame(area = c(mean(oceanic.prop.ntv$area)-sd(oceanic.prop.ntv$area),mean(oceanic.prop.ntv$area),mean(oceanic.prop.ntv$area)+sd(oceanic.prop.ntv$area)), size =c ("small", "medium","large"))
dist.range <- with(oceanic.prop.ntv, expand.grid(dist = seq(min(dist), max(dist), length = 1000)))
ex.grid <- expand.grid(area = area.minmax$area, dist = dist.range$dist)
pred.dat <- ex.grid %>% mutate(rac = mean(rac), abs.lat= mean(oceanic.prop.ntv$abs.lat), precipitation=mean(oceanic.prop.ntv$precipitation), temperature=mean(oceanic.prop.ntv$temperature))
pred <- predict.glm(model.oc.prop.rac,type="response",newdata = pred.dat,se=TRUE)
pdat <- cbind(ex.grid,pred) %>%
left_join(area.minmax)
areadist_oc_pres_ntv_plot<- ggplot(pdat, aes(x = dist, y = fit, fill=size, color=size))+
geom_line() +
geom_ribbon(aes(ymin=fit-se.fit, ymax=fit+se.fit), alpha=0.7)+
#geom_point(data=oceanic.prop.ntv, mapping=aes(x=dist, y=presence),alpha=0.2, size=2)+
theme_minimal()+
labs(y="Probability of N-fixing plant species")+
xlab("Distance [km]")+
theme(axis.text.y=element_text(size=30))+
theme(axis.text.x=element_text(size=30))+
theme(axis.title.y=element_text(size=30))+
theme(axis.title.x=element_text(size=30))+
#coord_cartesian(ylim=c(0,1))+
colScale+
fillScale+
ylim(0,0.1)+
#theme(legend.title = element_text(size=30))+ #change legend title font size
#theme(legend.text = element_text(size=30))+
theme(legend.key.size = unit(1, 'cm'), #change legend key size
legend.key.height = unit(1, 'cm'), #change legend key height
legend.key.width = unit(1, 'cm'), #change legend key width
legend.title = element_text(size=34), #change legend title font size
legend.text = element_text(size=30),#change legend text font size
legend.position = c(0.2, 0.85)) #change legend position
areadist_oc_pres_ntv_plot
#Saving the plot as a png
png("figures/M6_areadist_interaction.jpg", width=10, height= 10, units='in', res=300)
areadist_oc_pres_ntv_plot
dev.off()
dev.off()
areadist_oc_pres_ntv_plot<- ggplot(pdat, aes(x = dist, y = fit, fill=size, color=size))+
geom_line() +
geom_ribbon(aes(ymin=fit-se.fit, ymax=fit+se.fit), alpha=0.7)+
#geom_point(data=oceanic.prop.ntv, mapping=aes(x=dist, y=presence),alpha=0.2, size=2)+
theme_minimal()+
labs(y="Proportion of N-fixing plant species")+
xlab("Distance [km]")+
theme(axis.text.y=element_text(size=30))+
theme(axis.text.x=element_text(size=30))+
theme(axis.title.y=element_text(size=30))+
theme(axis.title.x=element_text(size=30))+
#coord_cartesian(ylim=c(0,1))+
colScale+
fillScale+
ylim(0,0.1)+
#theme(legend.title = element_text(size=30))+ #change legend title font size
#theme(legend.text = element_text(size=30))+
theme(legend.key.size = unit(1, 'cm'), #change legend key size
legend.key.height = unit(1, 'cm'), #change legend key height
legend.key.width = unit(1, 'cm'), #change legend key width
legend.title = element_text(size=34), #change legend title font size
legend.text = element_text(size=30),#change legend text font size
legend.position = c(0.2, 0.85)) #change legend position
areadist_oc_pres_ntv_plot
#Saving the plot as a png
png("figures/M6_areadist_interaction.jpg", width=10, height= 10, units='in', res=300)
areadist_oc_pres_ntv_plot
dev.off()
areadist_oc_pres_ntv_plot
dev.off()
