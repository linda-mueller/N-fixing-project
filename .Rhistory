rename(noNfixnum = noNfixnum_withna)                                      # Rename columns
#Join Nfix counts with geo data
#-------------------------
drivers <- combined.Nfix %>% left_join(geo, by = "entity_ID")
#Save data
#---------------------------
saveRDS(drivers, "data/Nfixdrivers_speciesnaturalized_2023.rds")
rm(list = ls(all.names = TRUE))
native.drivers <- readRDS("data/Nfixdrivers_speciesnative_2023.rds") %>%
rename(nfix = Nfixnum, nfixno = noNfixnum)
naturalized.drivers <- readRDS("data/Nfixdrivers_speciesnaturalized_2023.rds") %>%
dplyr::select("entity_ID","Nfixnum","noNfixnum") %>% rename(nfix.inv = Nfixnum, nfixno.inv = noNfixnum)
humans <- read.csv("data/geoentities_ice_LC_new.csv") %>%
dplyr::select(c("entity_ID", "mean_consensus_full_class_7", "mean_consensus_full_class_9")) %>%
rename(c(landuse = mean_consensus_full_class_7, urban = mean_consensus_full_class_9)) %>%
mutate(urbanland = urban + landuse)%>%
dplyr::select(-"urban")%>% dplyr::select(-"landuse")
#combine native and naturalized in a table like drivers, join with human land use
#change naturalized NAs to zeros
drivers.combined <- full_join(native.drivers, naturalized.drivers, by = "entity_ID") %>%
rename(temperature = CHELSA_annual_mean_Temp, precipitation = CHELSA_annual_Prec) %>%
left_join(humans, by = "entity_ID") %>%
mutate(nfix.inv = ifelse(is.na(nfix.inv), 0, nfix.inv))%>%
mutate(nfixno.inv = ifelse(is.na(nfixno.inv), 0, nfixno.inv))%>%
mutate(nfix = ifelse(is.na(nfix), 0, nfix)) %>%
mutate(nfixno = ifelse(is.na(nfixno), 0, nfixno))
saveRDS(drivers.combined, "data/fulldata_for_analysis.2023.rds")
rm(list = ls(all.names = TRUE))
#create reference database for modelling
gdat.reference <- readRDS("data/fulldata_for_analysis.2023.rds") %>%
dplyr::select(c("entity_ID","entity_class","entity_class2","nfix.inv","nfixno.inv","nfix","nfixno", "latitude","longitude","area", # Select columns
"elev_range","temperature","precipitation","dist","urbanland","Popdensity")) %>%
mutate(landtype = entity_class2) %>%
mutate(elev_range = ifelse(elev_range== 0,1,elev_range)) %>%                        # Make 0 elevations 1
mutate(elev_range = ifelse(is.na(elev_range),1,elev_range)) %>%                    # Make unknown elevations 1
mutate(abs.lat = abs(latitude))%>%                                                #create absolute latitude
relocate(abs.lat, .after = latitude) %>%                                          #move column after latitude column
dplyr::select(-c("entity_class2"))
#assign status native/naturalized
gdat.ref.ntv <- gdat.reference%>% dplyr::select(-c("nfix.inv", "nfixno.inv")) %>% mutate(status="native") %>% rename(nfix= nfix, nfixno=nfixno)     #create new column for status and save native species
gdat.ref.inv <- gdat.reference%>% dplyr::select(-c("nfix", "nfixno")) %>% mutate(status="naturalized") %>% rename(nfix= nfix.inv, nfixno=nfixno.inv) # create new column for status and save naturalized species
gdat.status <- rbind(gdat.ref.ntv, gdat.ref.inv) #combine native and naturalized subsets to get column for status
#create presence column
gdat.presence <- gdat.status %>%
mutate(presence = case_when(nfix==0 ~ 0, nfix> 0 ~1))
saveRDS(gdat.presence, "data/fulldata_for_analysis_2023.rds")
library(tidyverse)
library(tidyr)
#Read datasets
#--------------------
geo.ref <- readRDS("data/GIFT_EXT_geo_Aug_2023.rds") %>%
mutate(geology= ifelse(entity_class=="Island"&is.na(geology), "other_island", geology))%>%
mutate(geology= ifelse(entity_class=="Mainland", "other_mainland", geology)) %>%
filter(!entity_class== "undetermined")
geo.ml<-geo.ref%>% filter(entity_class=="Mainland")
geo <- geo.ref %>%
mutate(entity_class2 = case_when(geology == "dev" ~ "oceanic",
geology == "nondev" ~ "nonoceanic",
entity_class == "Mainland" ~ "mainland",
geology== "other_island" ~ "other_island"))
ndat <- read.csv("data/Werner_NFix.csv", header = TRUE) %>%
dplyr::select(c("species", "family", "data_fixing"))
species <- readRDS("data/GIFT_species_Aug_2023.rds") %>%
dplyr::select("entity_ID",'species','family') %>%
filter(entity_ID %in% geo$entity_ID)
geo <- geo %>%
filter(entity_ID %in% species$entity_ID)
#Merge datasets
#--------------------
dat <- species %>% left_join(ndat, by = c("species", "family")) %>%                       # Merge species and ndat, keep all unassigned species
left_join(geo, by = "entity_ID") %>%                                                    # Merge species2 with geo
group_by(entity_ID) %>% distinct(species, .keep_all = TRUE) %>%                         # Remove duplicates of species within each region
ungroup() # Ungroup
#Species counts
#---------------------------
#Count N-fixing per entity
Nfix.yes <- dat %>%                               # Take dat
group_by(entity_ID, data_fixing) %>%            # Group by location and N-fixing
summarise(n = n()) %>%                          # Count sum of data fixing by loc
filter(data_fixing == "Yes") %>%                # Subset only N-fixing-yes
dplyr::select(-data_fixing) %>%                 # Remove data_fixing cat
rename(Nfixnum = n) %>%                         # Rename cols
ungroup()                                       # Ungroup
#Count non-N-fixing per entity
Nfix.no <- dat %>%                                # Take dat
group_by(entity_ID, data_fixing) %>%            # Group by location and data fixing
summarise(n = n()) %>%                          # Count sum of data fixing by loc
filter(data_fixing == "No") %>%                 # Subset only no
dplyr:: select(-data_fixing) %>%                # Remove data_fixing cat
rename(noNfixnum = n) %>%                       # Rename cols
ungroup()                                       # Ungroup
#Join together
Nfix.merge <- Nfix.yes %>%
full_join(Nfix.no, by = "entity_ID") %>%                    # Merge yes and no counts
mutate(Nfixnum  = ifelse(is.na(Nfixnum), 0, Nfixnum)) %>%   # Replace NA with 0
mutate(noNfixnum = ifelse(is.na(noNfixnum), 0, noNfixnum))  # Replace NA with 0
#Family counts
#-------------------------------
#Count number of N-fixing species per family and proportion of N-fixing within family
Nfix.fam <- dat %>%
distinct(species, .keep_all=TRUE) %>%             # Keep only distinct species across dataset
drop_na(data_fixing) %>%                          # Remove NAs before counting
group_by(family, data_fixing) %>%                 # Group by family and data_fixing
summarise(n = n()) %>%                            # Count
mutate(p = n / sum(n)) %>%                        # Get proportion
filter(data_fixing == "Yes") %>%                  # Only take yes counts
dplyr::select(-data_fixing) %>%                   # Remove data fixing col
rename(Nfixnumfam = n, Nfixpropfam = p) %>%       # Rename cols
ungroup()                                         # Ungroup
#Count number of non-N-fixing species per family and proportion of non-N-fixing within family
noNfix.fam <- dat %>%
distinct(species, .keep_all=TRUE) %>%             # Keep only distinct species across dataset
drop_na(data_fixing) %>%                          # Remove NAs before counting
group_by(family, data_fixing) %>%                 # Group by family and data_fixing
summarise(n = n()) %>%                            # Count
mutate(p = n / sum(n)) %>%                        # Get proportion
filter(data_fixing == "No") %>%                   # Only take no counts
dplyr::select(-data_fixing) %>%                   # Remove data fixing col
rename(noNfixnumfam = n, noNfixpropfam = p) %>%   # Rename cols
ungroup()                                         # Ungroup
#Merge proportions of N-fixing and non-Nfixing per family
Nfix.fam.prop <- Nfix.fam %>%
full_join(noNfix.fam, by = "family") %>%                                        # Merge Nfix and Non Nfix proportions
dplyr::select(-c(Nfixnumfam, noNfixnumfam)) %>%                                 # Remove sums
mutate(Nfixpropfam = ifelse(is.na(Nfixpropfam), 0, Nfixpropfam)) %>%            # Replace NA with 0
mutate(noNfixpropfam = ifelse(is.na(noNfixpropfam), 0, noNfixpropfam)) %>%      # Replace NA with 0
mutate(Nfixpropfam = ifelse(noNfixpropfam == 1, 0, Nfixpropfam)) %>%            # Fill all Nfixprop with zero if noNfixprop is 1
mutate(noNfixpropfam = ifelse(Nfixpropfam == 1, 0, noNfixpropfam))              # Fill all noNfixprop with zero if Nfixprop is 1
#Save data
#---------------------------
saveRDS(Nfix.fam.prop, "data/Nfix.fam.prop_2024.rds")
#Find number of N-fixing families per entity
FamilypropNfix <- dat %>%
left_join(Nfix.fam.prop, by = "family") %>%             # Merge dat and family nprop (apply nprop to each species occurence)
filter(is.na(data_fixing)) %>%                          # Find where species id resulted in NA data_fixing to apply fam prop
group_by(entity_ID) %>%                                 # Group by entity_ID
summarise(sum = sum(Nfixpropfam, na.rm = T)) %>%        # Calculate sum of Nfix prop
mutate(sum = ceiling(sum)) %>%
rename(NfixnumF = sum) %>%
ungroup()
#Find number of non-N-fixing families per entity
FamilypropnoNfix <- dat %>%
left_join(Nfix.fam.prop, by = "family") %>%             # Merge dat and family nprop (apply nprop to each species occurence)
filter(is.na(data_fixing)) %>%                          # Find where species id resulted in NA data_fixing to apply fam prop
group_by(entity_ID) %>%                                 # Group by entity_ID
summarise(sum = sum(noNfixpropfam, na.rm = T)) %>%      # Calculate sum of noNfix prop
mutate(sum = ceiling(sum)) %>%
rename(noNfixnumF = sum) %>%
ungroup()
#Merge numbers of N-fixing and non-Nfixing families per entity
Nfix.fam.merge <- FamilypropNfix %>%
full_join(FamilypropnoNfix, by = "entity_ID")
#Number of N-fix and non-N-fix per entity (species assigned and family proportion assigned)
combined.Nfix.sp.fam <- Nfix.fam.merge %>%
left_join(Nfix.merge, by = "entity_ID") %>%                          # Combine these counts (sum) with species level dat:
filter(!is.na(entity_ID)) %>%                                        # Remove na entity_ID
replace(is.na(.), 0) %>%                                             # Replace na with 0
mutate(combinedNfix = Nfixnum + NfixnumF) %>%                        # Sum Ncounts(fam) and Nfixnum (sp)
mutate(combinednoNfix = noNfixnum + noNfixnumF) %>%                  # Sum NoNcounts(fam) and noNfixnum(sp)
dplyr::select(c(entity_ID, combinedNfix, combinednoNfix)) %>%        # Select columns of interest
rename(Nfixnum = combinedNfix, noNfixnum = combinednoNfix)           # Rename columns
#No ID species (NA)
#------------------
species.fam.na <- dat %>%
left_join(Nfix.fam.prop, by = "family") %>%               # Merge dat and family nprop (apply nprop to each species occurence)
filter(is.na(noNfixpropfam)) %>%                          # Omit where known to fam prop
filter(is.na(data_fixing)) %>%                            # Omit where known to species
mutate(data_fixing = "No")                                # Replace NA with No; this is making all unknowns "No"s: 52004 species
Nfix.no.na <- species.fam.na %>%                            # Take species.fam.na
group_by(entity_ID, data_fixing) %>%                      # Group by location and data fixing
summarise(n = n()) %>%                                    # Count sum of data fixing by loc
filter(data_fixing == "No")%>%                            # Subset only nos
dplyr::select(-data_fixing) %>%                           # Remove data_fixing cat
rename(noNfixnum.na = n)                                  # Rename cols
#Add NA to non-Nfixing
combined.Nfix <- combined.Nfix.sp.fam %>%
left_join(Nfix.no.na, by = "entity_ID") %>%                               # Join sp.fam with no.na fam
mutate(noNfixnum.na = ifelse(is.na(noNfixnum.na), 0, noNfixnum.na)) %>%   # make na counts zero if NA
mutate(noNfixnum_withna = noNfixnum + noNfixnum.na) %>%                   # Sum the sp.fam no with the no.na
dplyr::select(-c(noNfixnum, noNfixnum.na)) %>%                            # Remove select columns
replace(is.na(.), 0) %>%                                                  # Replace na with 0
rename(noNfixnum = noNfixnum_withna)                                      # Rename columns
#Join Nfix counts with geo data
#-------------------------
drivers <- combined.Nfix %>% left_join(geo, by = "entity_ID")
#Save data
#---------------------------
saveRDS(drivers, "data/Nfixdrivers_speciesnative_2024.rds")
rm(list = ls(all.names = TRUE))
geo.ref <- readRDS("data/GIFT_EXT_geo_Aug_2023.rds")%>%
mutate(geology= ifelse(entity_class=="Island" & is.na(geology), "other_island", geology))%>%
mutate(geology= ifelse(entity_class=="Mainland", "other_mainland", geology))%>%
filter(!entity_class== "undetermined")
geo <- geo.ref %>%
mutate(entity_class2 = case_when(geology == "dev" ~ "oceanic",
geology == "nondev" ~ "nonoceanic",
entity_class == "Mainland" ~ "mainland",
geology== "other_island" ~ "other_island"))
ndat <- read.csv("data/Werner_NFix.csv", header = TRUE) %>%
dplyr::select(c("species", "family", "data_fixing"))
species <- read.csv("data/glonaf_newcompleteness.csv", header = TRUE) %>%               #Load in species table (GLONAF)
dplyr::select(c("entity_ID", "species_name", "family_tpl", "completeness_id")) %>%    #Subset to necessary columns
rename(family = family_tpl, species = species_name) %>%                               #Rename columns
filter(completeness_id == 2 | completeness_id == 3)  %>%                              #Select only completeness 2 or 3
dplyr::select(-c("completeness_id")) %>%
filter(entity_ID %in% geo$entity_ID)
geo <- geo %>%
filter(entity_ID %in% species$entity_ID)
#Merge datasets
#--------------------
dat <- species %>% left_join(ndat, by = c("species", "family")) %>%                       # Merge species and ndat, keep all unassigned species
left_join(geo, by = "entity_ID") %>%                                                    # Merge species2 with geo
group_by(entity_ID) %>% distinct(species, .keep_all = TRUE) %>%                         # Remove duplicates of species within each region
ungroup()
# Ungroup
#Species counts
#---------------------------
#Count N-fixing per entity
Nfix.yes <- dat %>%                               # Take dat
group_by(entity_ID, data_fixing) %>%            # Group by location and N-fixing
summarise(n = n()) %>%                          # Count sum of data fixing by loc
filter(data_fixing == "Yes") %>%                # Subset only N-fixing-yes
dplyr::select(-data_fixing) %>%                 # Remove data_fixing cat
rename(Nfixnum = n) %>%                         # Rename cols
ungroup()                                       # Ungroup
#Count non-N-fixing per entity
Nfix.no <- dat %>%                                # Take dat
group_by(entity_ID, data_fixing) %>%            # Group by location and data fixing
summarise(n = n()) %>%                          # Count sum of data fixing by loc
filter(data_fixing == "No") %>%                 # Subset only no
dplyr:: select(-data_fixing) %>%                # Remove data_fixing cat
rename(noNfixnum = n) %>%                       # Rename cols
ungroup()                                       # Ungroup
#Join together
Nfix.merge <- Nfix.yes %>%
full_join(Nfix.no, by = "entity_ID") %>%                    # Merge yes and no counts
mutate(Nfixnum  = ifelse(is.na(Nfixnum), 0, Nfixnum)) %>%   # Replace NA with 0
mutate(noNfixnum = ifelse(is.na(noNfixnum), 0, noNfixnum))  # Replace NA with 0
#Family counts
#Read native version:
Nfix.fam.prop <- readRDS("data/Nfix.fam.prop_2024.rds")
#Find number of N-fixing families per entity
FamilypropNfix <- dat %>%
left_join(Nfix.fam.prop, by = "family") %>%             # Merge dat and family nprop (apply nprop to each species occurence)
filter(is.na(data_fixing)) %>%                          # Find where species id resulted in NA data_fixing to apply fam prop
group_by(entity_ID) %>%                                 # Group by entity_ID
summarise(sum = sum(Nfixpropfam, na.rm = T)) %>%        # Calculate sum of Nfix prop
mutate(sum = ceiling(sum)) %>%
rename(NfixnumF = sum) %>%
ungroup()
#Find number of non-N-fixing families per entity
FamilypropnoNfix <- dat %>%
left_join(Nfix.fam.prop, by = "family") %>%             # Merge dat and family nprop (apply nprop to each species occurence)
filter(is.na(data_fixing)) %>%                          # Find where species id resulted in NA data_fixing to apply fam prop
group_by(entity_ID) %>%                                 # Group by entity_ID
summarise(sum = sum(noNfixpropfam, na.rm = T)) %>%      # Calculate sum of noNfix prop
mutate(sum = ceiling(sum)) %>%
rename(noNfixnumF = sum) %>%
ungroup()
#Merge numbers of N-fixing and non-Nfixing families per entity
Nfix.fam.merge <- FamilypropNfix %>%
full_join(FamilypropnoNfix, by = "entity_ID")
#Number of N-fix and non-N-fix per entity (species assigned and family proportion assigned)
combined.Nfix.sp.fam <- Nfix.fam.merge %>%
left_join(Nfix.merge, by = "entity_ID") %>%                          # Combine these counts (sum) with species level dat:
filter(!is.na(entity_ID)) %>%                                        # Remove na entity_ID
replace(is.na(.), 0) %>%                                             # Replace na with 0
mutate(combinedNfix = Nfixnum + NfixnumF) %>%                        # Sum Ncounts(fam) and Nfixnum (sp)
mutate(combinednoNfix = noNfixnum + noNfixnumF) %>%                  # Sum NoNcounts(fam) and noNfixnum(sp)
dplyr::select(c(entity_ID, combinedNfix, combinednoNfix)) %>%        # Select columns of interest
rename(Nfixnum = combinedNfix, noNfixnum = combinednoNfix)           # Rename columns
#No ID species (NA)
#------------------
species.fam.na <- dat %>%
left_join(Nfix.fam.prop, by = "family") %>%               # Merge dat and family nprop (apply nprop to each species occurence)
filter(is.na(noNfixpropfam)) %>%                          # Omit where known to fam prop
filter(is.na(data_fixing)) %>%                            # Omit where known to species
mutate(data_fixing = "No")                                # Replace NA with No; this is making all unknowns "No"s: 52004 species
Nfix.no.na <- species.fam.na %>%                            # Take species.fam.na
group_by(entity_ID, data_fixing) %>%                      # Group by location and data fixing
summarise(n = n()) %>%                                    # Count sum of data fixing by loc
filter(data_fixing == "No")%>%                            # Subset only nos
dplyr::select(-data_fixing) %>%                           # Remove data_fixing cat
rename(noNfixnum.na = n)                                  # Rename cols
#Add NA to non-Nfixing
combined.Nfix <- combined.Nfix.sp.fam %>%
left_join(Nfix.no.na, by = "entity_ID") %>%                               # Join sp.fam with no.na fam
mutate(noNfixnum.na = ifelse(is.na(noNfixnum.na), 0, noNfixnum.na)) %>%   # make na counts zero if NA
mutate(noNfixnum_withna = noNfixnum + noNfixnum.na) %>%                   # Sum the sp.fam no with the no.na
dplyr::select(-c(noNfixnum, noNfixnum.na)) %>%                            # Remove select columns
replace(is.na(.), 0) %>%                                                  # Replace na with 0
rename(noNfixnum = noNfixnum_withna)                                      # Rename columns
#Join Nfix counts with geo data
#-------------------------
drivers <- combined.Nfix %>% left_join(geo, by = "entity_ID")
#Save data
#---------------------------
saveRDS(drivers, "data/Nfixdrivers_speciesnaturalized_2024.rds")
rm(list = ls(all.names = TRUE))
native.drivers <- readRDS("data/Nfixdrivers_speciesnative_2023.rds") %>%
rename(nfix = Nfixnum, nfixno = noNfixnum)
naturalized.drivers <- readRDS("data/Nfixdrivers_speciesnaturalized_2023.rds") %>%
dplyr::select("entity_ID","Nfixnum","noNfixnum") %>% rename(nfix.inv = Nfixnum, nfixno.inv = noNfixnum)
humans <- read.csv("data/geoentities_ice_LC_new.csv") %>%
dplyr::select(c("entity_ID", "mean_consensus_full_class_7", "mean_consensus_full_class_9")) %>%
rename(c(landuse = mean_consensus_full_class_7, urban = mean_consensus_full_class_9)) %>%
mutate(urbanland = urban + landuse)%>%
dplyr::select(-"urban")%>% dplyr::select(-"landuse")
#combine native and naturalized in a table like drivers, join with human land use
#change naturalized NAs to zeros
drivers.combined <- full_join(native.drivers, naturalized.drivers, by = "entity_ID") %>%
rename(temperature = CHELSA_annual_mean_Temp, precipitation = CHELSA_annual_Prec) %>%
left_join(humans, by = "entity_ID") %>%
mutate(nfix.inv = ifelse(is.na(nfix.inv), 0, nfix.inv))%>%
mutate(nfixno.inv = ifelse(is.na(nfixno.inv), 0, nfixno.inv))%>%
mutate(nfix = ifelse(is.na(nfix), 0, nfix)) %>%
mutate(nfixno = ifelse(is.na(nfixno), 0, nfixno))
saveRDS(drivers.combined, "data/fulldata_for_analysis.2024.rds")
rm(list = ls(all.names = TRUE))
#create reference database for modelling
gdat.reference <- readRDS("data/fulldata_for_analysis.2023.rds") %>%
dplyr::select(c("entity_ID","entity_class","entity_class2","nfix.inv","nfixno.inv","nfix","nfixno", "latitude","longitude","area", # Select columns
"elev_range","temperature","precipitation","dist","urbanland","Popdensity")) %>%
mutate(landtype = entity_class2) %>%
mutate(elev_range = ifelse(elev_range== 0,1,elev_range)) %>%                        # Make 0 elevations 1
mutate(elev_range = ifelse(is.na(elev_range),1,elev_range)) %>%                    # Make unknown elevations 1
mutate(abs.lat = abs(latitude))%>%                                                #create absolute latitude
relocate(abs.lat, .after = latitude) %>%                                          #move column after latitude column
dplyr::select(-c("entity_class2"))
#assign status native/naturalized
gdat.ref.ntv <- gdat.reference%>% dplyr::select(-c("nfix.inv", "nfixno.inv")) %>% mutate(status="native") %>% rename(nfix= nfix, nfixno=nfixno)     #create new column for status and save native species
gdat.ref.inv <- gdat.reference%>% dplyr::select(-c("nfix", "nfixno")) %>% mutate(status="naturalized") %>% rename(nfix= nfix.inv, nfixno=nfixno.inv) # create new column for status and save naturalized species
gdat.status <- rbind(gdat.ref.ntv, gdat.ref.inv) #combine native and naturalized subsets to get column for status
#create presence column
gdat.presence <- gdat.status %>%
mutate(presence = case_when(nfix==0 ~ 0, nfix> 0 ~1))
saveRDS(gdat.presence, "data/fulldata_for_analysis_2024.rds")
native.drivers <- readRDS("data/Nfixdrivers_speciesnative_2023.rds") %>%
rename(nfix = Nfixnum, nfixno = noNfixnum)
naturalized.drivers <- readRDS("data/Nfixdrivers_speciesnaturalized_2023.rds") %>%
dplyr::select("entity_ID","Nfixnum","noNfixnum") %>% rename(nfix.inv = Nfixnum, nfixno.inv = noNfixnum)
library(tidyverse)
library(tidyr)
native.drivers <- readRDS("data/Nfixdrivers_speciesnative_2023.rds") %>%
rename(nfix = Nfixnum, nfixno = noNfixnum)
naturalized.drivers <- readRDS("data/Nfixdrivers_speciesnaturalized_2023.rds") %>%
dplyr::select("entity_ID","Nfixnum","noNfixnum") %>% rename(nfix.inv = Nfixnum, nfixno.inv = noNfixnum)
humans <- read.csv("data/geoentities_ice_LC_new.csv") %>%
dplyr::select(c("entity_ID", "mean_consensus_full_class_7", "mean_consensus_full_class_9")) %>%
rename(c(landuse = mean_consensus_full_class_7, urban = mean_consensus_full_class_9)) %>%
mutate(urbanland = urban + landuse)%>%
dplyr::select(-"urban")%>% dplyr::select(-"landuse")
#combine native and naturalized in a table like drivers, join with human land use
#change naturalized NAs to zeros
drivers.combined <- full_join(native.drivers, naturalized.drivers, by = "entity_ID") %>%
rename(temperature = CHELSA_annual_mean_Temp, precipitation = CHELSA_annual_Prec) %>%
left_join(humans, by = "entity_ID") %>%
mutate(nfix.inv = ifelse(is.na(nfix.inv), 0, nfix.inv))%>%
mutate(nfixno.inv = ifelse(is.na(nfixno.inv), 0, nfixno.inv))%>%
mutate(nfix = ifelse(is.na(nfix), 0, nfix)) %>%
mutate(nfixno = ifelse(is.na(nfixno), 0, nfixno))
saveRDS(drivers.combined, "data/combined_drivers_2024.rds")
rm(list = ls(all.names = TRUE))
#create reference database for modelling
gdat.reference <- readRDS("data/fulldata_for_analysis.2023.rds") %>%
dplyr::select(c("entity_ID","entity_class","entity_class2","nfix.inv","nfixno.inv","nfix","nfixno", "latitude","longitude","area", # Select columns
"elev_range","temperature","precipitation","dist","urbanland","Popdensity")) %>%
mutate(landtype = entity_class2) %>%
mutate(elev_range = ifelse(elev_range== 0,1,elev_range)) %>%                        # Make 0 elevations 1
mutate(elev_range = ifelse(is.na(elev_range),1,elev_range)) %>%                    # Make unknown elevations 1
mutate(abs.lat = abs(latitude))%>%                                                #create absolute latitude
relocate(abs.lat, .after = latitude) %>%                                          #move column after latitude column
dplyr::select(-c("entity_class2"))
#create reference database for modelling
gdat.reference <- readRDS("data/combined_drivers_2024.rds") %>%
dplyr::select(c("entity_ID","entity_class","entity_class2","nfix.inv","nfixno.inv","nfix","nfixno", "latitude","longitude","area", # Select columns
"elev_range","temperature","precipitation","dist","urbanland","Popdensity")) %>%
mutate(landtype = entity_class2) %>%
mutate(elev_range = ifelse(elev_range== 0,1,elev_range)) %>%                        # Make 0 elevations 1
mutate(elev_range = ifelse(is.na(elev_range),1,elev_range)) %>%                    # Make unknown elevations 1
mutate(abs.lat = abs(latitude))%>%                                                #create absolute latitude
relocate(abs.lat, .after = latitude) %>%                                          #move column after latitude column
dplyr::select(-c("entity_class2"))
#assign status native/naturalized
gdat.ref.ntv <- gdat.reference%>% dplyr::select(-c("nfix.inv", "nfixno.inv")) %>% mutate(status="native") %>% rename(nfix= nfix, nfixno=nfixno)     #create new column for status and save native species
gdat.ref.inv <- gdat.reference%>% dplyr::select(-c("nfix", "nfixno")) %>% mutate(status="naturalized") %>% rename(nfix= nfix.inv, nfixno=nfixno.inv) # create new column for status and save naturalized species
gdat.status <- rbind(gdat.ref.ntv, gdat.ref.inv) #combine native and naturalized subsets to get column for status
#create presence column
gdat.presence <- gdat.status %>%
mutate(presence = case_when(nfix==0 ~ 0, nfix> 0 ~1))
saveRDS(gdat.presence, "data/fulldata_for_analysis_2024.rds")
# Load the necessary libraries
library(dplyr);library(segmented);library(nlme);library(mgcv);library(gridExtra);library(betareg);
library(MASS);library(lme4);library(lmerTest);library(lsmeans);library(ggeffects);library(spdep);
library(ggplot2);library(effects);library(ncf);library(ape);library(sjPlot);library(gridExtra);
library(MuMIn);library(tidyverse);library(car); library(V8); library(rsq); library(DHARMa); library(grateful)
source("extra_functions.R")
options(na.action = "na.fail") #Change na. action
#Load dataset from data cleaning script
gdat.ref <- readRDS("data/fulldata_for_analysis_2024.rds") %>%
dplyr::select(c("entity_ID","entity_class","nfix","nfixno", "latitude","abs.lat","longitude", # Select columns
"landtype","status","presence","area","elev_range","precipitation","dist", "temperature","urbanland"))
#dataset for broad presence model including mainlands
gdat.ml.pres <- gdat.ref %>%
dplyr::select(c("entity_ID","nfix","nfixno", "latitude","abs.lat","longitude", # Select columns
"landtype","status","presence","area","elev_range","precipitation","temperature"))%>%
filter(!landtype=="other_island")%>%                                          #remove islands with undetermined type
mutate(area = as.vector(log10((area)+.01)))%>%                                #log transform area
drop_na()%>%
mutate_at(c("abs.lat","area","elev_range","precipitation", "temperature"), scale) #scale all explanatory variables
#check correlations
dat <- gdat.ml.pres
names(gdat.ml.pres)
cont.var <- c("abs.lat", "elev_range","area","precipitation","temperature")
Mypairs(dat[,cont.var]) # area and elevation range 0.57, abs.lat and temperature 0.88
broad.pres.model.full<- glm(presence~landtype*status+abs.lat+area+elev_range+precipitation+temperature, data =gdat.ml.pres, family= binomial(link ="logit"))
summary(broad.pres.model.full)
ref.land.stat <- lsmeans(broad.pres.model.full,pairwise~landtype*status, data= gdat.ml.pres, type="response")
ref.table.land.stat <- as.data.frame(ref.land.stat$lsmeans)
#model including spatial correlation variable
rac <- Spat.cor.rep(broad.pres.model.full,gdat.ml.pres,2000)
broad.pres.model.rac.full <- glm(presence~landtype*status+abs.lat+area+elev_range+precipitation+temperature+rac, data = gdat.ml.pres, family = binomial(link ="logit")) #has to be exactly the same as the model but with +rac
summary(broad.pres.model.rac.full)
#M1 with only selected variables after stepwise regression
broad.pres.model<- glm(presence~landtype*status+abs.lat+area+elev_range, data =gdat.ml.pres, family= binomial(link ="logit"))
summary(broad.pres.model)
ref.land.stat <- lsmeans(broad.pres.model,pairwise~landtype*status, data= gdat.ml.pres, type="response")
ref.table.land.stat <- as.data.frame(ref.land.stat$lsmeans)
#Correlogram to test distance of spatial autocorrelation
correlogram(broad.pres.model, gdat.ml.pres, "figures/broadprescorrelogram.jpg")
#model including spatial correlation variable (rac)
rac <- Spat.cor.rep(broad.pres.model,gdat.ml.pres,2000)
broad.pres.model.rac <- glm(presence~landtype*status+abs.lat+area+elev_range+rac, data = gdat.ml.pres, family = binomial(link ="logit")) #has to be exactly the same as the model but with +rac
summary(broad.pres.model.rac)
#check variance inflation factor (should be below 5 for all variables)
vif(broad.pres.model.rac)
#add rac variable to df to include in lsmeans.
gdat.ml.pres$rac <- rac
ref.land.stat.rac<-lsmeans(broad.pres.model.rac,pairwise~landtype*status, data = gdat.ml.pres, type="response")
ref.table.land.stat.rac<-as.data.frame(ref.land.stat.rac$lsmeans)
#contrasts
means <- emmeans(broad.pres.model.rac, ~landtype*status)
#look at means order to determine how to write contrasts:
means
#write contrasts:
contrasts <- list("mainland v all islands native" = c(-2,1,1,0,0,0),
"mainland v nonoceanic islands native" = c(-1,1,0,0,0,0),
"mainland v oceanic islands native" = c(-1,0,1,0,0,0),
"nonoceanic v oceanic islands native" = c(0,-1,1,0,0,0),
"mainland v all islands naturalized" = c(0,0,0,-2,1,1),
"mainland v oceanic islands naturalized" = c(0,0,0,-1,0,1),
"mainland v nonoceanic islands naturalized" = c(0,0,0,-1,1,0),
"nonoceanic v oceanic islands naturalized" = c(0,0,0,0,-1,1),
# is first contrast different native v non-native?
"mainland v all islands * status" = c(-2,1,1,2,-1,-1),
"mainland v oceanic islands * status" = c(-1,0,1,1,0,-1),
"mainland v nonoceanic islands * status" =  c(-1,1,0,1,-1,0),
"nonoceanic v oceanic island * status" = c(0,-1,1,0,1,-1),
"native v naturalized only on mainlands" =  c(-1,0,0,1,0,0),
"native v naturalized only on oceanic islands" =  c(0,0,-1,0,0,1),
"native v naturalized only on nonoceanic islands" =  c(0,-1,0,0,1,0),
"native v naturalized on both island types" =  c(0,-1,-1,0,1,1)
)
#extract results to df:
results <- lsmeans::contrast(means,contrasts)
results.df <- as.data.frame(results)
results.df
#Naturalized Plot
#subset data to only include naturalized for plot
gdat.ml.ntz<- gdat.ml.pres%>%filter(status=="naturalized")
ref.table.land.stat.rac.ntz <- ref.table.land.stat.rac%>%filter(!status=="native") #subset lsmeans to only include naturalized for plot
#Create a custom color scale
colScale <- scale_colour_manual(values=c("coral"))
fillScale <- scale_fill_manual(values=c("coral"))
#plot the model results for M1 presence of naturalized flora across islands and mainlands
broad.pres.ntz<-
ggplot(ref.table.land.stat.rac.ntz, aes(x = landtype, y = lsmean, fill = status, color = status))  +
geom_point(position=position_dodge(1), size = 2) +
geom_errorbar(aes(ymin=lsmean-SE, ymax=lsmean+SE), width=0.4,size=1, position=position_dodge(1)) +
theme(legend.justification=c(1,1), legend.position=c(1,1))+
geom_bar(stat="identity",position=position_dodge(1), alpha=0.3)+
geom_point(data = gdat.ml.ntz,aes(x=landtype,y=presence,color=status),position=position_jitterdodge(dodge.width = 1),size=2,alpha=0.3)+
coord_cartesian(ylim=c(0,1))+
colScale+
fillScale+
labs(y="Probability of N-fixing Plants")+
xlab(" ")+
theme_classic(base_size = 30) +
theme(legend.justification=c(1,1), legend.position=c(1,1))+
theme(legend.position = "top")+
theme(legend.key = element_rect(colour =c("coral") ))+
theme(legend.background = element_blank(),legend.box.background = element_rect(colour = "black"))+
guides(color="none", fill = guide_legend(title="Floral status:",override.aes = list(shape = NA)))+
theme(axis.text.y=element_text(size=50))+
theme(axis.text.x=element_text(size=50))+
ylim(0,1)
broad.pres.ntz
####DATASET####
#Load dataset from data cleaning script
gdat.ref <- readRDS("data/fulldata_for_analysis_2023.rds") %>%
dplyr::select(c("entity_ID","entity_class","nfix","nfixno", "latitude","abs.lat","longitude", # Select columns
"landtype","status","presence","area","elev_range","precipitation","dist", "temperature","urbanland"))
####DATASET####
#Load dataset from data cleaning script
gdat.ref <- readRDS("data/fulldata_for_analysis_2023.rds") %>%
dplyr::select(c("entity_ID","entity_class","nfix","nfixno", "latitude","abs.lat","longitude", # Select columns
"landtype","status","presence","area","elev_range","precipitation","dist", "temperature","urbanland"))
####DATASET####
#Load dataset from data cleaning script
gdat.ref <- readRDS("data/fulldata_for_analysis_2023.rds") %>%
dplyr::select(c("entity_ID","entity_class","nfix","nfixno", "latitude","abs.lat","longitude", # Select columns
"landtype","status","presence","area","elev_range","precipitation","dist", "temperature","urbanland"))
