summary(model.oc.pres.rac.full)
#M5 with only selected variables after stepwise regression
model.oc.pres <- glm(presence~ area + dist +precipitation+temperature , data=oceanic.pres.ntv, family=binomial(link ="logit"))
summary(model.oc.pres)
#model including spatial correlation variable (rac)
rac <- Spat.cor.rep(model.oc.pres,oceanic.pres.ntv,2000)
model.oc.pres.rac <- glm(presence~ area + dist +precipitation+temperature +rac, data = oceanic.pres.ntv, family = binomial(link ="logit"))
summary(model.oc.pres.rac)
#check model assumptions
simulationOutput <- simulateResiduals(fittedModel = model.oc.pres.rac.full, plot = F)
#overdispersion
testDispersion(simulationOutput)
#check model assumptions
simulationOutput <- simulateResiduals(fittedModel = model.oc.pres.rac, plot = F)
#overdispersion
testDispersion(simulationOutput)
#subset data for proportion analysis
oceanic.prop.ntv <- gdat.isl.ntv%>%
#remove outliers
filter(!entity_ID == 675) %>%
filter(!entity_ID == 921) %>%
filter(!entity_ID == 11474)%>%
mutate(species = nfix + nfixno)%>% #find out values that have no species counts
filter(species > 0)%>%
filter(precipitation<4)
#####M6 Model proportion of native N-fixing species on oceanic islands
model.oc.prop.full<- glm(cbind(nfix,nfixno)~abs.lat+area +dist +elev_range+precipitation +temperature+ area:dist, data=oceanic.prop.ntv, family=binomial(link ="logit"))
summary(model.oc.prop.full)
#model including spatial correlation variable (rac)
rac <- Spat.cor.rep(model.oc.prop.full,oceanic.prop.ntv,2000)
model.oc.prop.rac.full <- glm(cbind(nfix,nfixno)~abs.lat +area +dist+elev_range +precipitation+temperature + area:dist+rac, data = oceanic.prop.ntv, family = binomial(link ="logit")) #has to be exactly the same as the model but with +rac
summary(model.oc.prop.rac.full)
#selected variables
model.oc.prop<- glm(cbind(nfix,nfixno)~abs.lat+area +dist+precipitation +temperature+ area:dist, data=oceanic.prop.ntv, family=binomial(link ="logit"))
summary(model.oc.prop)
#Correlogram to test distance of spatial autocorrelation
correlogram(model.oc.prop, oceanic.prop.ntv, "figures/M6_ntvocprop_correlogram.jpg")
#model including spatial correlation variable (rac)
rac <- Spat.cor.rep(model.oc.prop,oceanic.prop.ntv,2000)
model.oc.prop.rac <- glm(cbind(nfix,nfixno)~abs.lat +area +dist+precipitation+temperature + area:dist+rac, data = oceanic.prop.ntv, family = binomial(link ="logit")) #has to be exactly the same as the model but with +rac
summary(model.oc.prop.rac)
#check variance inflation factor (should be below 5 for all variables)
vif(model.oc.prop.rac)
#selected variables
model.oc.prop<- glm(cbind(nfix,nfixno)~abs.lat+area +dist+precipitation +temperature, data=oceanic.prop.ntv, family=binomial(link ="logit"))
summary(model.oc.prop)
model.oc.prop.rac <- glm(cbind(nfix,nfixno)~abs.lat +area +dist+precipitation+temperature +rac, data = oceanic.prop.ntv, family = binomial(link ="logit")) #has to be exactly the same as the model but with +rac
#model including spatial correlation variable (rac)
rac <- Spat.cor.rep(model.oc.prop,oceanic.prop.ntv,2000)
model.oc.prop.rac <- glm(cbind(nfix,nfixno)~abs.lat +area +dist+precipitation+temperature +rac, data = oceanic.prop.ntv, family = binomial(link ="logit")) #has to be exactly the same as the model but with +rac
summary(model.oc.prop.rac)
#check model assumptions
#check dispersion
disp_check(model.oc.prop.rac,oceanic.prop.ntv)
simulationOutput <- simulateResiduals(fittedModel = model.oc.prop.rac, plot = F)
#overdispersion
testDispersion(simulationOutput)
simulationOutput <- simulateResiduals(fittedModel = model.oc.prop.rac.full, plot = F)
#overdispersion
testDispersion(simulationOutput)
#dataset for M2 broad proportion model including mainlands
gdat.ml.prop <- gdat.ref %>%
dplyr::select(c("entity_ID","nfix","nfixno", "latitude","abs.lat","longitude", # Select columns
"landtype","status","presence","area","elev_range","precipitation", "temperature"))%>%
filter(!landtype=="other_island")%>%                                          #remove islands with undetermined type
mutate(area = as.vector(log10((area)+.01)))%>%                                #log transform area
mutate(species = nfix + nfixno) %>%   #find out rows that have no species counts
filter(species > 0) %>%
drop_na() %>%
mutate_at(c("abs.lat","area","elev_range","precipitation","temperature"), scale) %>%  #scale all explanatory variables
filter(precipitation < 3.5)   #remove outliers
#check correlations
dat <- gdat.ml.prop
#### M2 Model Broad Proportion across islands and mainlands including native and naturalized flora
broad.prop.model<- glm(cbind(nfix,nfixno)~landtype*status+abs.lat+area+elev_range+precipitation+temperature, data =gdat.ml.prop, family= binomial(link ="logit"))
summary(broad.prop.model)
#model including spatial correlation variable (rac)
rac <- Spat.cor.rep(broad.prop.model,gdat.ml.prop,2000)
broad.prop.model.rac <- glm(cbind(nfix,nfixno)~landtype*status+abs.lat+area+elev_range+precipitation+temperature+rac, data = gdat.ml.prop, family = binomial(link ="logit")) #has to be exactly the same as the model but with +rac
summary(broad.prop.model.rac)
#check model assumptions
simulationOutput <- simulateResiduals(fittedModel = broad.prop.model.rac, plot = F)
#overdispersion
testDispersion(simulationOutput)
#load data and filter out all locations without species counts
oceanic.prop<-gdat.isl.ntz%>%
mutate(species = nfix + nfixno)%>%
filter(species > 0)%>%
filter(precipitation< 4) #take out outlier (only do this in scaled version for modelling remove when creating figures)
#M4 with only selected variables after stepwise regression
model.oc.prop<- glm(cbind(nfix,nfixno)~abs.lat +area +dist, data=oceanic.prop, family=binomial(link ="logit"))
summary(model.oc.prop)
#Correlogram to test distance of spatial autocorrelation
correlogram(model.oc.prop, oceanic.prop, "figures/M4_ntzocprop_correlogram.jpg")
#model including spatial correlation variable (rac)
rac <- Spat.cor.rep(model.oc.prop,oceanic.prop,2000)
model.oc.prop.rac <- glm(cbind(nfix,nfixno)~abs.lat +area +dist+rac, data = oceanic.prop, family = binomial(link ="logit"))
summary(model.oc.prop.rac)
#Load dataset and subset to only naturalized species and oceanic islands
gdat.isl.ntz <- gdat.ref %>%
dplyr::select(c("entity_ID","entity_class","nfix","nfixno", "latitude","abs.lat","longitude", # Select columns
"landtype","status","presence","area","dist","elev_range","precipitation", "temperature","urbanland"))%>%
filter(status=="naturalized")%>%
mutate(area = as.vector(log10((area)+.01)))%>%  #log10 transformation of area for models only; remove for figures
filter(landtype=="oceanic")%>%
drop_na()%>%
mutate_at(c("abs.lat","area","dist","elev_range","precipitation", "temperature","urbanland"), scale)#%>%  #scale all explanatory variables
#model with selected variables after stepwise regression
model.oc.pres<- glm(presence~abs.lat+area+dist+area:dist, data=gdat.isl.ntz, family=binomial(link ="logit"))
summary(model.oc.pres)
#Correlogram to test distance of spatial autocorrelation
correlogram(model.oc.pres, gdat.isl.ntz, "figures/M3_ntzocpres_correlogram.jpg")
#model including spatial correlation variable (rac)
rac <- Spat.cor.rep(model.oc.pres,gdat.isl.ntz,2000)
model.oc.pres.rac<- glm(presence~ abs.lat+area+dist+area:dist+rac, data = gdat.isl.ntz, family = binomial(link ="logit")) #has to be exactly the same as the model but with +rac
summary(model.oc.pres.rac)
#load libraries
library(tidyverse)
library(tidyr)
#Read datasets
#--------------------
geo.ref <- readRDS("data/GIFT_EXT_geo_Aug_2023.rds") %>%
mutate(geology= ifelse(entity_class=="Island"&is.na(geology), "other_island", geology))%>%
mutate(geology= ifelse(entity_class=="Mainland", "other_mainland", geology)) %>%
filter(!entity_class== "undetermined")
geo.ml<-geo.ref%>% filter(entity_class=="Mainland")
geo <- geo.ref %>%
mutate(entity_class2 = case_when(geology == "dev" ~ "oceanic",
geology == "nondev" ~ "nonoceanic",
entity_class == "Mainland" ~ "mainland",
geology== "other_island" ~ "other_island"))
ndat <- read.csv("data/Werner_NFix.csv", header = TRUE) %>%
dplyr::select(c("species", "family", "data_fixing"))
species <- read.csv("data/GIFT_EXT_species_Aug_2023.csv") %>%
dplyr::select("entity_ID",'species','family') %>%
filter(entity_ID %in% geo$entity_ID)
geo <- geo %>%
filter(entity_ID %in% species$entity_ID)
#Merge datasets
#--------------------
dat <- species %>% left_join(ndat, by = c("species", "family")) %>%                       # Merge species and ndat, keep all unassigned species
left_join(geo, by = "entity_ID") %>%                                                    # Merge species2 with geo
group_by(entity_ID) %>% distinct(species, .keep_all = TRUE) %>%                         # Remove duplicates of species within each region
ungroup() # Ungroup
rm(list = ls(all.names = TRUE))
geo.ref <- readRDS("data/GIFT_EXT_geo_Aug_2023.rds")%>%
mutate(geology= ifelse(entity_class=="Island" & is.na(geology), "other_island", geology))%>%
mutate(geology= ifelse(entity_class=="Mainland", "other_mainland", geology))%>%
filter(!entity_class== "undetermined")
geo <- geo.ref %>%
mutate(entity_class2 = case_when(geology == "dev" ~ "oceanic",
geology == "nondev" ~ "nonoceanic",
entity_class == "Mainland" ~ "mainland",
geology== "other_island" ~ "other_island"))
ndat <- read.csv("data/Werner_NFix.csv", header = TRUE) %>%
dplyr::select(c("species", "family", "data_fixing"))
species <- read.csv("data/glonaf_newcompleteness.csv", header = TRUE) %>%               #Load in species table (GLONAF)
dplyr::select(c("entity_ID", "species_name", "family_tpl", "completeness_id")) %>%    #Subset to necessary columns
rename(family = family_tpl, species = species_name) %>%                               #Rename columns
filter(completeness_id == 2 | completeness_id == 3)  %>%                              #Select only completeness 2 or 3
dplyr::select(-c("completeness_id")) %>%
filter(entity_ID %in% geo$entity_ID)
geo <- geo %>%
filter(entity_ID %in% species$entity_ID)
#Merge datasets
#--------------------
dat <- species %>% left_join(ndat, by = c("species", "family")) %>%                       # Merge species and ndat, keep all unassigned species
left_join(geo, by = "entity_ID") %>%                                                    # Merge species2 with geo
group_by(entity_ID) %>% distinct(species, .keep_all = TRUE) %>%                         # Remove duplicates of species within each region
ungroup() # Ungroup
species <- read.csv("data/glonaf_newcompleteness.csv", header = TRUE)
species <- read.csv("data/glonaf_newcompleteness.csv", header = TRUE) %>%               #Load in species table (GLONAF)
dplyr::select(c("entity_ID", "species_name", "family_tpl", "completeness_id")) %>%    #Subset to necessary columns
rename(family = family_tpl, species = species_name) %>%                               #Rename columns
filter(completeness_id == 2 | completeness_id == 3)  %>%                              #Select only completeness 2 or 3
dplyr::select(-c("completeness_id")) %>%
filter(entity_ID %in% geo$entity_ID)
species <- read.csv("data/glonaf_newcompleteness.csv", header = TRUE) %>%               #Load in species table (GLONAF)
dplyr::select(c("entity_ID", "species_name", "family_tpl", "completeness_id")) %>%    #Subset to necessary columns
rename(family = family_tpl, species = species_name) %>%                               #Rename columns
filter(completeness_id == 2 | completeness_id == 3)  %>%                              #Select only completeness 2 or 3
dplyr::select(-c("completeness_id")) %>%
filter(entity_ID %in% geo$entity_ID)
species <- read.csv("data/glonaf_newcompleteness.csv", header = TRUE)
species <- read.csv("data/glonaf_newcompleteness.csv", header = TRUE) %>%               #Load in species table (GLONAF)
dplyr::select(c("entity_ID", "species_name", "family_tpl", "completeness_id")) %>%    #Subset to necessary columns
rename(family = family_tpl, species = species_name) %>%                               #Rename columns
filter(completeness_id == 2 | completeness_id == 3)  %>%                              #Select only completeness 2 or 3
dplyr::select(-c("completeness_id")) %>%
filter(entity_ID %in% geo$entity_ID)
species <- read.csv("data/glonaf_newcompleteness.csv", header = TRUE)
species <- read.csv("data/GIFT_EXT_species_Aug_2023.csv")
#load libraries
library(tidyverse)
library(tidyr)
#Read datasets
#--------------------
geo.ref <- readRDS("data/GIFT_EXT_geo_Aug_2023.rds") %>%
mutate(geology= ifelse(entity_class=="Island"&is.na(geology), "other_island", geology))%>%
mutate(geology= ifelse(entity_class=="Mainland", "other_mainland", geology)) %>%
filter(!entity_class== "undetermined")
geo.ml<-geo.ref%>% filter(entity_class=="Mainland")
geo <- geo.ref %>%
mutate(entity_class2 = case_when(geology == "dev" ~ "oceanic",
geology == "nondev" ~ "nonoceanic",
entity_class == "Mainland" ~ "mainland",
geology== "other_island" ~ "other_island"))
ndat <- read.csv("data/Werner_NFix.csv", header = TRUE) %>%
dplyr::select(c("species", "family", "data_fixing"))
species <- read.csv("data/GIFT_EXT_species_Aug_2023.csv") %>%
dplyr::select("entity_ID",'species','family') %>%
filter(entity_ID %in% geo$entity_ID)
geo <- geo %>%
filter(entity_ID %in% species$entity_ID)
#Merge datasets
#--------------------
dat <- species %>% left_join(ndat, by = c("species", "family")) %>%                       # Merge species and ndat, keep all unassigned species
left_join(geo, by = "entity_ID") %>%                                                    # Merge species2 with geo
group_by(entity_ID) %>% distinct(species, .keep_all = TRUE) %>%                         # Remove duplicates of species within each region
ungroup() # Ungroup
#Species counts
#---------------------------
#Count N-fixing per entity
Nfix.yes <- dat %>%                               # Take dat
group_by(entity_ID, data_fixing) %>%            # Group by location and N-fixing
summarise(n = n()) %>%                          # Count sum of data fixing by loc
filter(data_fixing == "Yes") %>%                # Subset only N-fixing-yes
dplyr::select(-data_fixing) %>%                 # Remove data_fixing cat
rename(Nfixnum = n) %>%                         # Rename cols
ungroup()                                       # Ungroup
#Count non-N-fixing per entity
Nfix.no <- dat %>%                                # Take dat
group_by(entity_ID, data_fixing) %>%            # Group by location and data fixing
summarise(n = n()) %>%                          # Count sum of data fixing by loc
filter(data_fixing == "No") %>%                 # Subset only no
dplyr:: select(-data_fixing) %>%                # Remove data_fixing cat
rename(noNfixnum = n) %>%                       # Rename cols
ungroup()                                       # Ungroup
#Join together
Nfix.merge <- Nfix.yes %>%
full_join(Nfix.no, by = "entity_ID") %>%                    # Merge yes and no counts
mutate(Nfixnum  = ifelse(is.na(Nfixnum), 0, Nfixnum)) %>%   # Replace NA with 0
mutate(noNfixnum = ifelse(is.na(noNfixnum), 0, noNfixnum))  # Replace NA with 0
#Family counts
#-------------------------------
#Count number of N-fixing species per family and proportion of N-fixing within family
Nfix.fam <- dat %>%
distinct(species, .keep_all=TRUE) %>%             # Keep only distinct species across dataset
drop_na(data_fixing) %>%                          # Remove NAs before counting
group_by(family, data_fixing) %>%                 # Group by family and data_fixing
summarise(n = n()) %>%                            # Count
mutate(p = n / sum(n)) %>%                        # Get proportion
filter(data_fixing == "Yes") %>%                  # Only take yes counts
dplyr::select(-data_fixing) %>%                   # Remove data fixing col
rename(Nfixnumfam = n, Nfixpropfam = p) %>%       # Rename cols
ungroup()                                         # Ungroup
#Count number of non-N-fixing species per family and proportion of non-N-fixing within family
noNfix.fam <- dat %>%
distinct(species, .keep_all=TRUE) %>%             # Keep only distinct species across dataset
drop_na(data_fixing) %>%                          # Remove NAs before counting
group_by(family, data_fixing) %>%                 # Group by family and data_fixing
summarise(n = n()) %>%                            # Count
mutate(p = n / sum(n)) %>%                        # Get proportion
filter(data_fixing == "No") %>%                   # Only take no counts
dplyr::select(-data_fixing) %>%                   # Remove data fixing col
rename(noNfixnumfam = n, noNfixpropfam = p) %>%   # Rename cols
ungroup()                                         # Ungroup
#Merge proportions of N-fixing and non-Nfixing per family
Nfix.fam.prop <- Nfix.fam %>%
full_join(noNfix.fam, by = "family") %>%                                        # Merge Nfix and Non Nfix proportions
dplyr::select(-c(Nfixnumfam, noNfixnumfam)) %>%                                 # Remove sums
mutate(Nfixpropfam = ifelse(is.na(Nfixpropfam), 0, Nfixpropfam)) %>%            # Replace NA with 0
mutate(noNfixpropfam = ifelse(is.na(noNfixpropfam), 0, noNfixpropfam)) %>%      # Replace NA with 0
mutate(Nfixpropfam = ifelse(noNfixpropfam == 1, 0, Nfixpropfam)) %>%            # Fill all Nfixprop with zero if noNfixprop is 1
mutate(noNfixpropfam = ifelse(Nfixpropfam == 1, 0, noNfixpropfam))              # Fill all noNfixprop with zero if Nfixprop is 1
View(Nfix.fam.prop)
#Merge datasets
#--------------------
dat <- species %>% left_join(ndat, by = c("species", "family")) %>%                       # Merge species and ndat, keep all unassigned species
left_join(geo, by = "entity_ID") %>%                                                    # Merge species2 with geo
group_by(entity_ID) %>% distinct(species, .keep_all = TRUE) %>%                         # Remove duplicates of species within each region
ungroup() # Ungroup
#Species counts
#---------------------------
#Count N-fixing per entity
Nfix.yes <- dat %>%                               # Take dat
group_by(entity_ID, data_fixing) %>%            # Group by location and N-fixing
summarise(n = n()) %>%                          # Count sum of data fixing by loc
filter(data_fixing == "Yes") %>%                # Subset only N-fixing-yes
dplyr::select(-data_fixing) %>%                 # Remove data_fixing cat
rename(Nfixnum = n) %>%                         # Rename cols
ungroup()                                       # Ungroup
#Count non-N-fixing per entity
Nfix.no <- dat %>%                                # Take dat
group_by(entity_ID, data_fixing) %>%            # Group by location and data fixing
summarise(n = n()) %>%                          # Count sum of data fixing by loc
filter(data_fixing == "No") %>%                 # Subset only no
dplyr:: select(-data_fixing) %>%                # Remove data_fixing cat
rename(noNfixnum = n) %>%                       # Rename cols
ungroup()                                       # Ungroup
#Join together
Nfix.merge <- Nfix.yes %>%
full_join(Nfix.no, by = "entity_ID") %>%                    # Merge yes and no counts
mutate(Nfixnum  = ifelse(is.na(Nfixnum), 0, Nfixnum)) %>%   # Replace NA with 0
mutate(noNfixnum = ifelse(is.na(noNfixnum), 0, noNfixnum))  # Replace NA with 0
#Family counts
#-------------------------------
#Count number of N-fixing species per family and proportion of N-fixing within family
Nfix.fam <- dat %>%
distinct(species, .keep_all=TRUE) %>%             # Keep only distinct species across dataset
drop_na(data_fixing) %>%                          # Remove NAs before counting
group_by(family, data_fixing) %>%                 # Group by family and data_fixing
summarise(n = n()) %>%                            # Count
mutate(p = n / sum(n)) %>%                        # Get proportion
filter(data_fixing == "Yes") %>%                  # Only take yes counts
dplyr::select(-data_fixing) %>%                   # Remove data fixing col
rename(Nfixnumfam = n, Nfixpropfam = p) %>%       # Rename cols
ungroup()                                         # Ungroup
#Find number of N-fixing families per entity
FamilypropNfix <- dat %>%
left_join(Nfix.fam.prop, by = "family") %>%             # Merge dat and family nprop (apply nprop to each species occurence)
filter(is.na(data_fixing)) %>%                          # Find where species id resulted in NA data_fixing to apply fam prop
group_by(entity_ID) %>%                                 # Group by entity_ID
summarise(sum = sum(Nfixpropfam, na.rm = T)) %>%        # Calculate sum of Nfix prop
mutate(sum = ceiling(sum)) %>%
rename(NfixnumF = sum) %>%
ungroup()
#Find number of non-N-fixing families per entity
FamilypropnoNfix <- dat %>%
left_join(Nfix.fam.prop, by = "family") %>%             # Merge dat and family nprop (apply nprop to each species occurence)
filter(is.na(data_fixing)) %>%                          # Find where species id resulted in NA data_fixing to apply fam prop
group_by(entity_ID) %>%                                 # Group by entity_ID
summarise(sum = sum(noNfixpropfam, na.rm = T)) %>%      # Calculate sum of noNfix prop
mutate(sum = ceiling(sum)) %>%
rename(noNfixnumF = sum) %>%
ungroup()
#Merge numbers of N-fixing and non-Nfixing families per entity
Nfix.fam.merge <- FamilypropNfix %>%
full_join(FamilypropnoNfix, by = "entity_ID")
#Number of N-fix and non-N-fix per entity (species assigned and family proportion assigned)
combined.Nfix.sp.fam <- Nfix.fam.merge %>%
left_join(Nfix.merge, by = "entity_ID") %>%                          # Combine these counts (sum) with species level dat:
filter(!is.na(entity_ID)) %>%                                        # Remove na entity_ID
replace(is.na(.), 0) %>%                                             # Replace na with 0
mutate(combinedNfix = Nfixnum + NfixnumF) %>%                        # Sum Ncounts(fam) and Nfixnum (sp)
mutate(combinednoNfix = noNfixnum + noNfixnumF) %>%                  # Sum NoNcounts(fam) and noNfixnum(sp)
dplyr::select(c(entity_ID, combinedNfix, combinednoNfix)) %>%        # Select columns of interest
rename(Nfixnum = combinedNfix, noNfixnum = combinednoNfix)           # Rename columns
#No ID species (NA)
#------------------
species.fam.na <- dat %>%
left_join(Nfix.fam.prop, by = "family") %>%               # Merge dat and family nprop (apply nprop to each species occurence)
filter(is.na(noNfixpropfam)) %>%                          # Omit where known to fam prop
filter(is.na(data_fixing)) %>%                            # Omit where known to species
mutate(data_fixing = "No")                                # Replace NA with No; this is making all unknowns "No"s: 52004 species
Nfix.no.na <- species.fam.na %>%                            # Take species.fam.na
group_by(entity_ID, data_fixing) %>%                      # Group by location and data fixing
summarise(n = n()) %>%                                    # Count sum of data fixing by loc
filter(data_fixing == "No")%>%                            # Subset only nos
dplyr::select(-data_fixing) %>%                           # Remove data_fixing cat
rename(noNfixnum.na = n)                                  # Rename cols
View(species.fam.na)
#Add NA to non-Nfixing
combined.Nfix <- combined.Nfix.sp.fam %>%
left_join(Nfix.no.na, by = "entity_ID") %>%                               # Join sp.fam with no.na fam
mutate(noNfixnum.na = ifelse(is.na(noNfixnum.na), 0, noNfixnum.na)) %>%   # make na counts zero if NA
mutate(noNfixnum_withna = noNfixnum + noNfixnum.na) %>%                   # Sum the sp.fam no with the no.na
dplyr::select(-c(noNfixnum, noNfixnum.na)) %>%                            # Remove select columns
replace(is.na(.), 0) %>%                                                  # Replace na with 0
rename(noNfixnum = noNfixnum_withna)                                      # Rename columns
View(combined.Nfix)
#No ID species (NA)
#------------------
species.fam.na <- dat %>%
left_join(Nfix.fam.prop, by = "family") %>%               # Merge dat and family nprop (apply nprop to each species occurence)
filter(is.na(noNfixpropfam)) %>%                          # Omit where known to fam prop
filter(is.na(data_fixing)) %>%                            # Omit where known to species
mutate(data_fixing = "No")                                # Replace NA with No; this is making all unknowns "No"s: 52004 species
View(species.fam.na)
dat <- species %>% left_join(ndat, by = c("species", "family"))
#Merge datasets
#--------------------
dat <- species %>% left_join(ndat, by = c("species", "family")) %>%                       # Merge species and ndat, keep all unassigned species
left_join(geo, by = "entity_ID") %>%                                                    # Merge species2 with geo
group_by(entity_ID) %>% distinct(species, .keep_all = TRUE) %>%                         # Remove duplicates of species within each region
ungroup() # Ungroup
#Species counts
#---------------------------
#Count N-fixing per entity
Nfix.yes <- dat %>%                               # Take dat
group_by(entity_ID, data_fixing) %>%            # Group by location and N-fixing
summarise(n = n()) %>%                          # Count sum of data fixing by loc
filter(data_fixing == "Yes") %>%                # Subset only N-fixing-yes
dplyr::select(-data_fixing) %>%                 # Remove data_fixing cat
rename(Nfixnum = n) %>%                         # Rename cols
ungroup()                                       # Ungroup
#Count non-N-fixing per entity
Nfix.no <- dat %>%                                # Take dat
group_by(entity_ID, data_fixing) %>%            # Group by location and data fixing
summarise(n = n()) %>%                          # Count sum of data fixing by loc
filter(data_fixing == "No") %>%                 # Subset only no
dplyr:: select(-data_fixing) %>%                # Remove data_fixing cat
rename(noNfixnum = n) %>%                       # Rename cols
ungroup()                                       # Ungroup
#Join together
Nfix.merge <- Nfix.yes %>%
full_join(Nfix.no, by = "entity_ID") %>%                    # Merge yes and no counts
mutate(Nfixnum  = ifelse(is.na(Nfixnum), 0, Nfixnum)) %>%   # Replace NA with 0
mutate(noNfixnum = ifelse(is.na(noNfixnum), 0, noNfixnum))  # Replace NA with 0
rm(list = ls(all.names = TRUE))
geo.ref <- readRDS("data/GIFT_EXT_geo_Aug_2023.rds")%>%
mutate(geology= ifelse(entity_class=="Island" & is.na(geology), "other_island", geology))%>%
mutate(geology= ifelse(entity_class=="Mainland", "other_mainland", geology))%>%
filter(!entity_class== "undetermined")
geo <- geo.ref %>%
mutate(entity_class2 = case_when(geology == "dev" ~ "oceanic",
geology == "nondev" ~ "nonoceanic",
entity_class == "Mainland" ~ "mainland",
geology== "other_island" ~ "other_island"))
ndat <- read.csv("data/Werner_NFix.csv", header = TRUE) %>%
dplyr::select(c("species", "family", "data_fixing"))
species <- read.csv("data/glonaf_newcompleteness.csv", header = TRUE) %>%               #Load in species table (GLONAF)
dplyr::select(c("entity_ID", "species_name", "family_tpl", "completeness_id")) %>%    #Subset to necessary columns
rename(family = family_tpl, species = species_name) %>%                               #Rename columns
filter(completeness_id == 2 | completeness_id == 3)  %>%                              #Select only completeness 2 or 3
dplyr::select(-c("completeness_id")) %>%
filter(entity_ID %in% geo$entity_ID)
geo <- geo %>%
filter(entity_ID %in% species$entity_ID)
#Merge datasets
#--------------------
dat <- species %>% left_join(ndat, by = c("species", "family")) %>%                       # Merge species and ndat, keep all unassigned species
left_join(geo, by = "entity_ID") %>%                                                    # Merge species2 with geo
group_by(entity_ID) %>% distinct(species, .keep_all = TRUE) %>%                         # Remove duplicates of species within each region
ungroup() # Ungroup
#Species counts
#---------------------------
#Count N-fixing per entity
Nfix.yes <- dat %>%                               # Take dat
group_by(entity_ID, data_fixing) %>%            # Group by location and N-fixing
summarise(n = n()) %>%                          # Count sum of data fixing by loc
filter(data_fixing == "Yes") %>%                # Subset only N-fixing-yes
dplyr::select(-data_fixing) %>%                 # Remove data_fixing cat
rename(Nfixnum = n) %>%                         # Rename cols
ungroup()                                       # Ungroup
#Count non-N-fixing per entity
Nfix.no <- dat %>%                                # Take dat
group_by(entity_ID, data_fixing) %>%            # Group by location and data fixing
summarise(n = n()) %>%                          # Count sum of data fixing by loc
filter(data_fixing == "No") %>%                 # Subset only no
dplyr:: select(-data_fixing) %>%                # Remove data_fixing cat
rename(noNfixnum = n) %>%                       # Rename cols
ungroup()                                       # Ungroup
#Join together
Nfix.merge <- Nfix.yes %>%
full_join(Nfix.no, by = "entity_ID") %>%                    # Merge yes and no counts
mutate(Nfixnum  = ifelse(is.na(Nfixnum), 0, Nfixnum)) %>%   # Replace NA with 0
mutate(noNfixnum = ifelse(is.na(noNfixnum), 0, noNfixnum))  # Replace NA with 0
#Family counts
#Read native version:
Nfix.fam.prop <- readRDS("data/Nfix.fam.prop_2024.rds")
#Find number of N-fixing families per entity
FamilypropNfix <- dat %>%
left_join(Nfix.fam.prop, by = "family") %>%             # Merge dat and family nprop (apply nprop to each species occurence)
filter(is.na(data_fixing)) %>%                          # Find where species id resulted in NA data_fixing to apply fam prop
group_by(entity_ID) %>%                                 # Group by entity_ID
summarise(sum = sum(Nfixpropfam, na.rm = T)) %>%        # Calculate sum of Nfix prop
mutate(sum = ceiling(sum)) %>%
rename(NfixnumF = sum) %>%
ungroup()
#Find number of non-N-fixing families per entity
FamilypropnoNfix <- dat %>%
left_join(Nfix.fam.prop, by = "family") %>%             # Merge dat and family nprop (apply nprop to each species occurence)
filter(is.na(data_fixing)) %>%                          # Find where species id resulted in NA data_fixing to apply fam prop
group_by(entity_ID) %>%                                 # Group by entity_ID
summarise(sum = sum(noNfixpropfam, na.rm = T)) %>%      # Calculate sum of noNfix prop
mutate(sum = ceiling(sum)) %>%
rename(noNfixnumF = sum) %>%
ungroup()
#Merge numbers of N-fixing and non-Nfixing families per entity
Nfix.fam.merge <- FamilypropNfix %>%
full_join(FamilypropnoNfix, by = "entity_ID")
#Number of N-fix and non-N-fix per entity (species assigned and family proportion assigned)
combined.Nfix.sp.fam <- Nfix.fam.merge %>%
left_join(Nfix.merge, by = "entity_ID") %>%                          # Combine these counts (sum) with species level dat:
filter(!is.na(entity_ID)) %>%                                        # Remove na entity_ID
replace(is.na(.), 0) %>%                                             # Replace na with 0
mutate(combinedNfix = Nfixnum + NfixnumF) %>%                        # Sum Ncounts(fam) and Nfixnum (sp)
mutate(combinednoNfix = noNfixnum + noNfixnumF) %>%                  # Sum NoNcounts(fam) and noNfixnum(sp)
dplyr::select(c(entity_ID, combinedNfix, combinednoNfix)) %>%        # Select columns of interest
rename(Nfixnum = combinedNfix, noNfixnum = combinednoNfix)           # Rename columns
#No ID species (NA)
#------------------
species.fam.na <- dat %>%
left_join(Nfix.fam.prop, by = "family") %>%               # Merge dat and family nprop (apply nprop to each species occurence)
filter(is.na(noNfixpropfam)) %>%                          # Omit where known to fam prop
filter(is.na(data_fixing)) %>%                            # Omit where known to species
mutate(data_fixing = "No")                                # Replace NA with No; this is making all unknowns "No"s: 52004 species
Nfix.no.na <- species.fam.na %>%                            # Take species.fam.na
group_by(entity_ID, data_fixing) %>%                      # Group by location and data fixing
summarise(n = n()) %>%                                    # Count sum of data fixing by loc
filter(data_fixing == "No")%>%                            # Subset only nos
dplyr::select(-data_fixing) %>%                           # Remove data_fixing cat
rename(noNfixnum.na = n)                                  # Rename cols
#Add NA to non-Nfixing
combined.Nfix <- combined.Nfix.sp.fam %>%
left_join(Nfix.no.na, by = "entity_ID") %>%                               # Join sp.fam with no.na fam
mutate(noNfixnum.na = ifelse(is.na(noNfixnum.na), 0, noNfixnum.na)) %>%   # make na counts zero if NA
mutate(noNfixnum_withna = noNfixnum + noNfixnum.na) %>%                   # Sum the sp.fam no with the no.na
dplyr::select(-c(noNfixnum, noNfixnum.na)) %>%                            # Remove select columns
replace(is.na(.), 0) %>%                                                  # Replace na with 0
rename(noNfixnum = noNfixnum_withna)                                      # Rename columns
